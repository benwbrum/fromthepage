=render({ :partial => '/shared/article_tabs', :locals => { :selected => 1, :article_id => @article.id }})

.article-columns.columns
  article.maincol
    -description = xml_to_html(@article.xml_text)
    h3= t('.description')
    -if description.present?
      .big[*language_attrs(@collection)] ==description
    -else
      -if user_signed_in? && !current_user.guest
        i =link_to t('.edit_description_description'), collection_article_edit_path(@collection.owner, @collection, @article)

    -if @article.uri && @article.uri.include?("http")
      p
        = t('.see_also')
        a href="#{@article.uri}" target="_blank" #{@article.uri}

    h3= t('.related_subjects')
    .article-graph
      =image_tag(file_to_url(@article.graph_image), :usemap => '#G', alt: t('.related_subjects_1'))
      ==@map
    p.fglight ==t('.related_subjects_description', article: @article.title)

    =form_for(@article, method: 'post', url: { action: 'show', article_id: @article.id }) do |f|
      =hidden_field_tag(:force, true)
      table.form
        tr
          td(colspan="3")
            span Limit the graph to subjects in these categories (leave blank to show all):
            =label_tag "category-select", 'Select categories', class: 'hidden'
            select(name="category_ids[]" size="10" id="category-select" aria-label="Select categories" multiple data-graph-category)
              -@collection.categories.walk_tree do |c, level|
                -selected = true if @categories.include?(c)
                option(data-level=level value=c.id selected=selected) =c.title
        tr
          =label_tag 'min_rank', "Minimum number of subjects", class: 'hidden'
          td
            =text_field_tag('min_rank', @min_rank, type: 'number', min: 1, style: 'width:50px', "aria-label" => 'minimum number of subjects')
          td.w100.fglight.small =="Show related subjects that appear on at least this number of pages in common with #{@article.title}."
          th =button_tag
            =svg_symbol '#icon-refresh', class: 'icon'
            span Update Graph

  aside.sidecol
    -if user_signed_in? && @article.possible_duplicates.present?
      h5
        =link_to(collection_article_edit_path(@collection.owner, @collection, @article), class: 'fgred')
          =svg_symbol '#icon-warning-sign', class: 'icon icon-big vmiddle'
          span= t('.n_possible_duplicates', count: @article.possible_duplicates.size)
    h3= t('.categories')
    -if @article.categories.empty?
      p.fglight
        =t('.no_category_message')
        br
        =link_to t('.all_uncategorized_subjects'), article_list_path(collection_id: @collection.slug, anchor: "category-none")
    -else
      ul.article-category-list.big
        -@article.categories.each do |cat|
          li ==(cat.ancestors.reverse.push(cat).map { |c| link_to c.title, { action: 'list', collection_id: @collection.slug, anchor: "category-#{c.id}"} }).join(" &rarr; ")

    h3= t('.references')
    =render :partial => 'article_links'

    h3= t('.text_search')
    p= t('.search_all_pages_description', collection: (@collection.title), article: (@article.title)).html_safe
    =button_to t('.search_all_pages'), { :controller => 'display', :action => 'search', :article_id => @article.id, :collection_id => @collection }
    p= t('.search_unlinked_pages_description', article: (@article.title)).html_safe
    =button_to t('.search_unlinked_pages'), { :controller => 'display', :action => 'search', :article_id => @article.id, :unlinked_only => true, :collection_id => @collection}, { :rel => 'nofolllow' }
 
    -if user_signed_in? && current_user.like_owner?(@collection)
      h3= t('.export')
      p= t('.download_description')
      =link_to t('.download'), collection_subject_distribution_path(@collection.owner, @collection, @article), class: 'button btnExport'
 

-content_for :javascript
  javascript:
    $(function() {

      $('[data-graph-category]').select2({
        placeholder: 'Select categories...',
        templateResult: function(category) {
          if(!category.id) { return category.text; }
          var level = $(category.element).data('level');
          var $category = $('<div>').css('margin-left', level * 15).text(category.text);
          return $category;
        }
      });

      $('.btnExport').on('click', function() {
        Cookies.remove('download_finished', {path: '/'});
        var downloadCheckTimer = window.setInterval(function() {
          var cookie = Cookies.get('download_finished');

          if(cookie === 'true') {
            $('html').removeClass('page-busy');
            window.clearInterval(downloadCheckTimer);
          }
        }, 1000);
      });
    });