=render({ :partial => '/shared/collection_tabs', :locals => { :selected => 3, :collection_id => @collection }})
-if @categories.present?
  -if @page
    -page_link = link_to(t('.click_here'), transcribe_assign_categories_path(:page_id => @page.id))
    .category-back-message ==t('.category_back_message', page_link: page_link, page: @page.title)

  .collection-categories
    .category-tree
      h3= t('.categories')
      ==display_categories(@categories, nil) do |category|
        -ret = "<a href=\"#category-#{category.id}\" class=\"tree-item\">"
        -if category.children.any?
          -ret << "<span class=\"tree-bullet\"></span>"
        -ret << "<span>#{category.title}</span>"
        -ret << "</a>"
      -if @uncategorized_articles.present?
        ul
          li: a.tree-item(href="#category-none") =t('.uncategorized')

    .category-articles
      -@categories.each do |category|
        dl.category-article(id="category-#{category.id}")
          dt
            .headline
              //h3.headline_title ==(category.ancestors.reverse.push(category).map { |c| c.title }).join(" &rarr; ")
              h3.headline_title(data-category-title="#{category.id}") =category.title
              -if user_signed_in? && current_user.like_owner?(@collection)
                .headline_aside
                  dl.dropdown.right
                    dt.h5 tabindex=0
                      span= t('.actions')
                      =svg_symbol '#big-menu', class: 'icon icon-big'
                    dd
                      =link_to t('.edit_category'), category_edit_path(:collection_id => @collection.slug, :category_id => category.id), 'data-litebox' => ''
                      =link_to t('.add_child_category'), category_add_new_path(:collection_id => @collection.slug, :category_id => category.id), 'data-litebox' => ''
                      =link_to t('.add_root_category'), category_add_new_path(:collection_id => @collection.slug), 'data-litebox' => ''
                      -if category.gis_enabled
                        =link_to t('.disable_gis_for_category'), category_disable_gis_path(:collection_id => @collection.slug, :category_id => category.id)
                      -else
                        =link_to t('.enable_gis_for_category'), category_enable_gis_path(:collection_id => @collection.slug, :category_id => category.id)
                      hr
                      =link_to t('.delete_category'), { :controller => 'category', :action => 'delete', :collection_id => @collection.slug, :category_id => category.id }, class: 'fgred', data: { :confirm => t('.confirm_delete_category') }
                      hr
                      =link_to t('.upload_subjects'), article_upload_form_path(@collection.slug)

          dd
            -if category.articles_list(@collection).empty?
              p.acenter.fglight= t('.there_are_no_subjects')
            -else
              -@vertical_articles[category].each do |row|
                -row.each do |article|
                  -unless article.nil?
                    p[*language_attrs(@collection)]
                      =link_to article.title, collection_article_show_path(@collection.owner, @collection, article.id)
                  -else
                    p.hidden
                      a.hidden a
      -if @uncategorized_articles.present?
        dl.category-article#category-none
          dt: h3= t('.uncategorized_subjects')
          dd
            -@uncategorized_articles.each do |l|
              -l.each do |article|
                -unless article.nil?
                  p[*language_attrs(@collection)]
                    =link_to article.title, collection_article_show_path(@collection.owner, @collection, article.id)
                -else
                  p.hidden
                    a.hidden a
-else
  -add_category = link_to t('.create_the_first_category'), category_add_new_path(:collection_id => @collection.slug), 'data-litebox' => ''
  .nodata
    h4.nodata_title= t('.no_categories')
    p.nodata_text
      ==t('.no_categories_message')
      ==t('.create_category_message', link: add_category) if user_signed_in? && current_user.like_owner?(@collection)

-content_for :javascript
  javascript:
    $(function() {
      $(window).on('hashchange', function() {
        if (document.getElementsByClassName("category_modal")[0] !== undefined){
          document.getElementsByClassName("category_modal")[0].classList.remove("visible");
          location.reload();
        }
        var selected = window.location.hash || $('.tree-item:first').attr('href');
        var $tree_item = $('.tree-item[href="'+selected+'"]');

        if($tree_item.length !== 0) {
          $tree_item.parentsUntil('.category-tree', 'li').addClass('expanded');
          $('.tree-item.selected').removeClass('selected');
          $tree_item.addClass('selected');
          $(selected).show().siblings().hide();
        }
      }).trigger('hashchange');
    });