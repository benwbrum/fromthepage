<%=stylesheet_link_tag "codemirror/lib/codemirror"%>
<%=stylesheet_link_tag "codemirror-buttons/buttons"%>
<%=javascript_include_tag "codemirror/lib/codemirror"%>
<%=javascript_include_tag "codemirror/mode/xml/xml"%>
<%=javascript_include_tag "codemirror/addon/display/display/panel"%>
<%=javascript_include_tag "codemirror/addon/hint/show-hint"%>
<%=javascript_include_tag "codemirror/addon/hint/xml-hint"%>
<%=javascript_include_tag "codemirror-buttons/buttons"%>

<script>
  <% if feature_enabled?(:codemirror) || [46191, 45477].include?(@work.id) %>
    var button_config = [
      <% @collection.editor_buttons.each do |button| %>
        {
          hotkey: '<%= button.hotkey %>',
          class: '<%= "editor-buttons-#{button.key}" %>',
          label: '<%= "#{button.key}" %>',
          callback: function (cm) {
            var selection = cm.getSelection();
            cm.replaceSelection('<%= button.open_tag %>' + selection + '<%= button.close_tag %>');
            if (!selection) {
              var cursorPos = cm.getCursor();
              cm.setCursor(cursorPos.line, cursorPos.ch - <%= button.cursor_offset %>);
            }
            <% if button.has_attribute %>
              else {
                var cursorPos = cm.getCursor();
                cm.setCursor(cursorPos.line, cursorPos.ch - <%= button.cursor_offset %> - selection.length - 2);
              }
            <% end %>
          }
        },
      <% end %>
    ];
  <% end %>

  <% if @collection.owner.slug == 'stanfordlibraries' #image du monde %>
        var button_config = [
          {
            hotkey: 'Ctrl-E',
            class: 'italic',
            label: 'expan',
            callback: function (cm) {
              var selection = cm.getSelection();
              cm.replaceSelection('<expan orig="">' + selection + '</expan>');
              if (!selection) {
                var cursorPos = cm.getCursor();
                cm.setCursor(cursorPos.line, cursorPos.ch - 8);
              } else {
                var cursorPos = cm.getCursor();
                cm.setCursor(cursorPos.line, cursorPos.ch - 8 - selection.length - 2);
              }
            }
          },
          {
            hotkey: 'Ctrl-R',
            class: 'italic',
            label: 'reg',
            callback: function (cm) {
              var selection = cm.getSelection();
              cm.replaceSelection('<reg orig="">' + selection + '</reg>');
              if (!selection) {
                var cursorPos = cm.getCursor();
                cm.setCursor(cursorPos.line, cursorPos.ch - 6);
              } else {
                var cursorPos = cm.getCursor();
                cm.setCursor(cursorPos.line, cursorPos.ch - 6 - selection.length - 2);
              }
            }
          },
          {
            class: 'red',
            label: 'red',
            callback: function (cm) {
              var selection = cm.getSelection();
              cm.replaceSelection('<span style="color:red;">' + selection + '</span>');
              if (!selection) {
                var cursorPos = cm.getCursor();
                cm.setCursor(cursorPos.line, cursorPos.ch - 7);
              }
            }
          },
          {
            class: 'blue',
            label: 'blue',
            callback: function (cm) {
              var selection = cm.getSelection();
              cm.replaceSelection('<span style="color:blue;">' + selection + '</span>');
              if (!selection) {
                var cursorPos = cm.getCursor();
                cm.setCursor(cursorPos.line, cursorPos.ch - 7);
              }
            }
          },
          {
            hotkey: 'Ctrl-^',
            class: 'sup',
            label: 'sup',
            callback: function (cm) {
              var selection = cm.getSelection();
              cm.replaceSelection('<hi rend="sup">' + selection + '</hi>');
              if (!selection) {
                var cursorPos = cm.getCursor();
                cm.setCursor(cursorPos.line, cursorPos.ch - 5);
              }
            }
          },
          {
            hotkey: 'Ctrl-%',
            class: 'strike',
            label: 'str',
            callback: function (cm) {
              var selection = cm.getSelection();
              cm.replaceSelection('<hi rend="str">' + selection + '</hi>');
              if (!selection) {
                var cursorPos = cm.getCursor();
                cm.setCursor(cursorPos.line, cursorPos.ch - 5);
              }
            }
          },
          {
            hotkey: 'Ctrl-u',
            class: 'u',
            label: 'u',
            callback: function (cm) {
              var selection = cm.getSelection();
              cm.replaceSelection('<hi rend="underline">' + selection + '</hi>');
              if (!selection) {
                var cursorPos = cm.getCursor();
                cm.setCursor(cursorPos.line, cursorPos.ch - 5);
              }
            }
          },
          {
            hotkey: 'Ctrl-U',
            class: 'italic',
            label: 'unclear',
            callback: function (cm) {
              var selection = cm.getSelection();
              cm.replaceSelection('<unclear>' + selection + '</unclear>');
              if (!selection) {
                var cursorPos = cm.getCursor();
                cm.setCursor(cursorPos.line, cursorPos.ch - 10);
              }
            }
          }];

        <% end %>

  <% if @collection.owner.slug == 'cwrgm' %>
        var button_config = [
          {
            hotkey: 'Ctrl-P',
            class: 'sup',
            label: 'sup',
            callback: function (cm) {
              var selection = cm.getSelection();
              cm.replaceSelection('<sup>' + selection + '</sup>');
              if (!selection) {
                var cursorPos = cm.getCursor();
                cm.setCursor(cursorPos.line, cursorPos.ch - 6);
              }
            }
          },
          {
            hotkey: 'Ctrl-S',
            class: 'strike',
            label: 'str',
            callback: function (cm) {
              var selection = cm.getSelection();
              cm.replaceSelection('<s>' + selection + '</s>');
              if (!selection) {
                var cursorPos = cm.getCursor();
                cm.setCursor(cursorPos.line, cursorPos.ch - 4);
              }
            }
          },
          {
            hotkey: 'Ctrl-U',
            class: 'u',
            label: 'u',
            callback: function (cm) {
              var selection = cm.getSelection();
              cm.replaceSelection('<u>' + selection + '</u>');
              if (!selection) {
                var cursorPos = cm.getCursor();
                cm.setCursor(cursorPos.line, cursorPos.ch - 4);
              }
            }
          },
          {
            hotkey: 'Ctrl-G',
            class: 'italic',
            label: 'gap',
            callback: function (cm) {
              var selection = cm.getSelection();
              cm.replaceSelection('<gap>' + selection + '</gap>');
              if (!selection) {
                var cursorPos = cm.getCursor();
                cm.setCursor(cursorPos.line, cursorPos.ch - 6);
              }
            }
          },
          { 
            class: 'subscript',
            label: 'sub',
            callback: function (cm) {
              var selection = cm.getSelection();
              cm.replaceSelection('<sub>' + selection + '</sub>');
              if (!selection) {
                var cursorPos = cm.getCursor();
                cm.setCursor(cursorPos.line, cursorPos.ch - 6);
              }
            }
          }];

        <% end %>

  <% if @collection.owner.slug == 'folger' %>
        var button_config = [
          {
            hotkey: 'Ctrl-P',
            label: 'sup',
            callback: function (cm) {
              var selection = cm.getSelection();
              cm.replaceSelection('<sup>' + selection + '</sup>');
              if (!selection) {
                var cursorPos = cm.getCursor();
                cm.setCursor(cursorPos.line, cursorPos.ch - 6);
              }
            }
          },
          {
            hotkey: 'Ctrl-E',
            class: 'italic',
            label: 'abbr',
            callback: function (cm) {
              var selection = cm.getSelection();
              cm.replaceSelection('<abbr expan="">' + selection + '</abbr>');
              if (!selection) {
                var cursorPos = cm.getCursor();
                cm.setCursor(cursorPos.line, cursorPos.ch - 7);
              } else {
                var cursorPos = cm.getCursor();
                cm.setCursor(cursorPos.line, cursorPos.ch - 7 - selection.length - 2);
              }
            }
          },
          // {
          //   hotkey: 'Ctrl-E',
          //   class: 'italic',
          //   label: 'expan',
          //   callback: function (cm) {
          //     var selection = cm.getSelection();
          //     cm.replaceSelection('<expan orig="">' + selection + '</expan>');
          //     if (!selection) {
          //       var cursorPos = cm.getCursor();
          //       cm.setCursor(cursorPos.line, cursorPos.ch - 8);
          //     } else { 
          //       var cursorPos = cm.getCursor();
          //       cm.setCursor(cursorPos.line, cursorPos.ch - 8 - selection.length - 2);
          //     }
          //   }
          // },
          {
            hotkey: 'Ctrl-D',
            class: 'strikethrough',
            label: 'del',
            callback: function (cm) {
              var selection = cm.getSelection();
              cm.replaceSelection('<del>' + selection + '</del>');
              if (!selection) {
                var cursorPos = cm.getCursor();
                cm.setCursor(cursorPos.line, cursorPos.ch - 6);
              }
            }
          },
          // {
          //   hotkey: 'Ctrl-I',
          //   label: '^ ins',
          //   callback: function (cm) {
          //     var selection = cm.getSelection();
          //     cm.replaceSelection('<ins>' + selection + '</ins>');
          //     if (!selection) {
          //       var cursorPos = cm.getCursor();
          //       cm.setCursor(cursorPos.line, cursorPos.ch - 6);
          //     }
          //   }
          // },
          {
            hotkey: 'Ctrl-Shift-=',
            class: 'italic',
            label: 'add',
            callback: function (cm) {
              var selection = cm.getSelection();
              cm.replaceSelection('<add>' + selection + '</add>');
              if (!selection) {
                var cursorPos = cm.getCursor();
                cm.setCursor(cursorPos.line, cursorPos.ch - 6);
              }
            }
          },
          {
            hotkey: 'Ctrl-U',
            class: 'italic',
            label: 'unclear',
            callback: function (cm) {
              var selection = cm.getSelection();
              cm.replaceSelection('<unclear>' + selection + '</unclear>');
              if (!selection) {
                var cursorPos = cm.getCursor();
                cm.setCursor(cursorPos.line, cursorPos.ch - 10);
              }
            }
          }];

<% end %>

      var fromthepage_tags = {
        "!top": ["add", "cb", "date", "del", "expan", "figure", "gap", "hi", "ins", "milestone", "reg", "stamp", "sub", "sup", "table", "unclear", "u", "strike", "s", "span", "a"],
        add: { children: ["u", "s", "hi"] },
        cb: { attrs: { "n": null } },
        date: {attrs: { when: "YYYY-MM-DD" }, children: ["hi", "unclear", "gap"] },
        expan: {attrs: { orig: null }},
        figure: { attrs: { "type": ["hr", "postmark", "seal"] }},
        hi: { attrs: { "rend": ["bold", "italic", "str", "sub", "sup", "underline"]}},
        ins: { children: ["u", "s", "hi"]},
        milestone: { attrs: { "unit": ["column"], "n": null}},
        reg: {attrs: { orig: null }},
        row: { children: ["cell"] },
        stamp: { attrs: {"type": ["clerical", "postage", "revenue"]}},
        sup: { children: ["u", "s"] },
        table: { attrs: {"rend": ["rules"]}, children: ["row"] }
      }


      function completeAfter(cm, pred) {
        var cur = cm.getCursor();
        if (!pred || pred()) setTimeout(function() {
          if (!cm.state.completionActive)
            cm.showHint({completeSingle: false});
        }, 100);
        return CodeMirror.Pass;
      }

      function completeIfAfterLt(cm) {
        return completeAfter(cm, function() {
          var cur = cm.getCursor();
          return cm.getRange(CodeMirror.Pos(cur.line, cur.ch - 1), cur) == "<";
        });
      }

      function completeIfInTag(cm) {
        return completeAfter(cm, function() {
          var tok = cm.getTokenAt(cm.getCursor());
          if (tok.type == "string" && (!/['"]/.test(tok.string.charAt(tok.string.length - 1)) || tok.string.length == 1)) return false;
          var inner = CodeMirror.innerMode(cm.getMode(), tok.state).state;
          return inner.tagName;
        });
      }

      var myCodeMirror = CodeMirror.fromTextArea(
        document.getElementById("<%= textarea %>"),
        {
          lineNumbers: true, 
          mode: "xml",
          extraKeys: {
            "'<'": completeAfter,
            "'/'": completeIfAfterLt,
            "' '": completeIfInTag,
            "'='": completeIfInTag,
            "Ctrl-Space": "autocomplete",
            "Tab": "autocomplete"
          },
          lineWrapping: true,
          hintOptions: {schemaInfo: fromthepage_tags},
          buttons: button_config
          });

          myCodeMirror.setSize("100%", "100%");
</script>