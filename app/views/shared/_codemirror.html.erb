<%=stylesheet_link_tag "codemirror/lib/codemirror"%>
<%=javascript_include_tag "codemirror/lib/codemirror"%>
<%=javascript_include_tag "codemirror/mode/xml/xml"%>
<%=javascript_include_tag "codemirror/addon/display/display/panel"%>
<%=javascript_include_tag "codemirror/addon/hint/show-hint"%>
<%=javascript_include_tag "codemirror/addon/hint/xml-hint"%>
<%=javascript_include_tag "codemirror-buttons/buttons"%>

<% if @page && !@page.ai_plaintext.blank? %>
  <script>
    var ai_plaintext = <%= raw(@page.ai_plaintext.to_json) %>;
    var ai_plaintext_caveat = <%= raw(t('.ai_plaintext_caveat').to_json) %>;

    function appendAiPlaintext(cm, pred) {
      var currentText = cm.getValue();
      // append ai_plaintext to the end of the current text
      cm.setValue(currentText + ai_plaintext_caveat + "\n" + ai_plaintext);
      cm.markClean();
    }; 
    document.getElementById("copy-ai-plaintext").addEventListener("click", function() {
      appendAiPlaintext(myCodeMirror);
      // now disable the button
      $('#copy-ai-plaintext').prop('disabled', true);
    });

  </script>
<% end %>

<script>
  var button_config = [
    <% @collection.editor_buttons.each do |button| %>
      {
        hotkey: '<%= button.hotkey %>',
        class: '<%= "editor-buttons-#{button.key}" %>',
        label: '<%= "#{button.key}" %>',
        tooltip: '<%= t(".#{button.key}_description", default: button.key) %>',
        callback: function (cm) {
          var selection = cm.getSelection();
          cm.replaceSelection('<%= button.open_tag %>' + selection + '<%= button.close_tag %>');
          if (!selection) {
            var cursorPos = cm.getCursor();
            cm.setCursor(cursorPos.line, cursorPos.ch - <%= button.cursor_offset %>);
          }
          <% if button.has_attribute %>
            else {
              var cursorPos = cm.getCursor();
              cm.setCursor(cursorPos.line, cursorPos.ch - <%= button.cursor_offset %> - selection.length - 2);
            }
          <% end %>
        }
      },
    <% end %>
  ];

  var fromthepage_tags = {
    "!top": ["abbr", "add", "catchword", "cb", "date", "del", "expan", "figure", "footnote", "gap", "hi", "ins", "lb", "marginalia", "milestone", "reg", "stamp", "sub", "sup", "supplied", "table", "unclear", "u", "strike", "span", "a", "i"],
    abbr: { attrs: { expan: null}},
    add: { children: ["u", "s", "hi"] },
    cb: { attrs: { "n": null } },
    date: {attrs: { when: "YYYY-MM-DD" }, children: ["hi", "unclear", "gap"] },
    expan: {attrs: { abbr: null }},
    figure: { attrs: { "type": ["hr", "postmark", "seal"] }},
    footnote: { attrs: { marker: null } },
    hi: { attrs: { "rend": ["bold", "italic", "str", "sub", "sup", "underline"]}},
    ins: { children: ["u", "s", "hi"]},
    lb: { attrs: { "break": "no"}},
    milestone: { attrs: { "unit": ["column"], "n": null}},
    reg: {attrs: { orig: null }},
    row: { children: ["cell"] },
    stamp: { attrs: {"type": ["clerical", "postage", "revenue"]}},
    sup: { children: ["u", "s"] },
    table: { attrs: {"rend": ["rules"]}, children: ["row"] }
  }

  function completeAfter(cm, pred) {
    var cur = cm.getCursor();
    if (!pred || pred()) setTimeout(function() {
      if (!cm.state.completionActive)
        cm.showHint({completeSingle: false});
    }, 100);
    return CodeMirror.Pass;
  }

  function completeIfAfterLt(cm) {
    return completeAfter(cm, function() {
      var cur = cm.getCursor();
      return cm.getRange(CodeMirror.Pos(cur.line, cur.ch - 1), cur) == "<";
    });
  }

  function completeIfInTag(cm) {
    return completeAfter(cm, function() {
      var tok = cm.getTokenAt(cm.getCursor());
      if (tok.type == "string" && (!/['"]/.test(tok.string.charAt(tok.string.length - 1)) || tok.string.length == 1)) return false;
      var inner = CodeMirror.innerMode(cm.getMode(), tok.state).state;
      return inner.tagName;
    });
  }

  var myCodeMirror = CodeMirror.fromTextArea(
    document.getElementById("<%= textarea %>"),
    {
      lineNumbers: true,
      mode: "xml",
      extraKeys: {
        "'<'": completeAfter,
        "'/'": completeIfAfterLt,
        "' '": completeIfInTag,
        "'='": completeIfInTag,
        "Ctrl-Space": "autocomplete",
        "Tab": "autocomplete"
      },
      lineWrapping: true,
      hintOptions: {schemaInfo: fromthepage_tags},
      buttons: button_config,
      inputStyle: 'contenteditable',
      spellcheck: <%= @collection.enable_spellcheck %>,
      rtlMoveVisually: true,
      direction: "<%= text_direction %>",
    });
    // track editing for volunteer hours
    myCodeMirror.on("change", function(instance, changeObj) {
      sendActiveEditing()
    });
    
    // give codeMirror with class of respective text direction
    myCodeMirror.getWrapperElement().classList.add("<%= text_direction %>");
</script>