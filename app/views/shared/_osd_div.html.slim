=javascript_include_tag "https://cdnjs.cloudflare.com/ajax/libs/openseadragon/3.0.0/openseadragon.min.js"
=javascript_include_tag "openseadragon-filtering.js"
=javascript_include_tag "annotorious/annotorious-openseadragon.js"
=javascript_include_tag "annotorious/annotorious-openseadragon-textlayer.js"


.image-toolbar(id="image_toolbar")
  a#osd_zoom_in =svg_symbol "#icon-zoom-in", class: 'icon'
  a#osd_zoom_out =svg_symbol "#icon-zoom-out", class: 'icon'
  a#osd_home =svg_symbol "#icon-fit-view", class: 'icon'
  a#osd_fullpage =svg_symbol "#icon-expand", class: 'icon'
  a#osd_rotate_left =svg_symbol "#icon-rotate-left", class: 'icon'
  a#osd_rotate_right =svg_symbol "#icon-rotate-right", class: 'icon'
  dl.dropdown.right
    dt title= t('.image_filters')
      =svg_symbol "#icon-filters", class: 'icon'
    dd
      .filter
        span.filter_label= t('.brightness')
        =range_field_tag 'filter-brightness', 0, min: -10, max: 10, step: 1, 'data-filter': 'brightness'
        span.filter_value 0
      .filter
        span.filter_label= t('.contrast')
        =range_field_tag 'filter-contrast', 0, min: 0, max: 20, step: 1, 'data-filter': 'contrast'
        span.filter_value 0
      .filter
        span.filter_label= t('.threshold')
        =range_field_tag 'filter-threshold', 0, min: -10, max: 10, step: 1, 'data-filter': 'threshold'
        span.filter_value 0

  -if @page.nil?
    a#osd_prev =svg_symbol "#icon-arrow-left", class: 'icon'
    a#osd_next =svg_symbol "#icon-arrow-right", class: 'icon'

-if @page && @page.has_alto?
  .ai-toolbar(id="ai_toolbar")
    a#toggle-locked =svg_symbol "#icon-copy", class: 'icon'
    a#toggle-visibility #{t('.ai_assist')}

.image-container(id="image_container")




-content_for :javascript
  javascript:
    OpenSeadragon.DEFAULT_SETTINGS.timeout = 60000;
    var viewer = 'foo'; // global variable
    var lastFocused = null; // last focused field in the edit area

    $(function() {
      OpenSeadragon.setString("Tooltips.ZoomIn", "#{t('.zoom_in')}");
      OpenSeadragon.setString("Tooltips.ZoomOut", "#{t('.zoom_out')}");
      OpenSeadragon.setString("Tooltips.Home", "#{t('.home')}");
      OpenSeadragon.setString("Tooltips.FullPage", "#{t('.full_page')}");
      OpenSeadragon.setString("Tooltips.RotateLeft", "#{t('.rotate_left')}");
      OpenSeadragon.setString("Tooltips.RotateRight", "#{t('.rotate_right')}");
      
      viewer = OpenSeadragon({
        id: "image_container",
        toolbar: "image_toolbar",
        prefixUrl: "",
        crossOriginPolicy: "Anonymous",
        showRotationControl: true,
        gestureSettingsTouch: {
          pinchRotate: true
        },
        zoomInButton: "osd_zoom_in",
        zoomOutButton: "osd_zoom_out",
        homeButton: "osd_home",
        fullPageButton: "osd_fullpage",
        rotateLeftButton: "osd_rotate_left",
        rotateRightButton: "osd_rotate_right",
        previousButton: "osd_prev",
        nextButton: "osd_next",
        maxZoomPixelRatio: 10,
        visibilityRatio: 1,
        fitBounds: true,
        preserveViewport: true,
        showReferenceStrip: #{@page.nil?},
        referenceStripScroll: 'vertical',
        sequenceMode: #{@page.nil?},
        tileSources: #{raw(osd_source(@page, @work))}
      });

      viewer.addHandler('reset-bounds', function() {
        var bounds = viewer.viewport.getBounds();
        var aspect = bounds.height / bounds.width;
        var home = viewer.viewport.getHomeBounds();
        var rect = new OpenSeadragon.Rect(0, Math.min(0, home.y), 1, aspect);
        viewer.viewport.fitBounds(rect, true);
      });

      viewer.addHandler('viewport-change', function() {
        var bounds = viewer.viewport.getBounds();
        localStorage['json_bounds'] = JSON.stringify(bounds);
      });

      viewer.addHandler('open', function() {
        var json_bounds = localStorage['json_bounds'];
        if (json_bounds) {
          var bounds = JSON.parse(json_bounds);
          var rect = new OpenSeadragon.Rect(bounds.x, bounds.y, bounds.width, bounds.height);
          viewer.viewport.fitBounds(rect, true);
        } else {
          viewer.raiseEvent('reset-bounds');
        }
      });

      viewer.addHandler('canvas-press', function() {
        lastFocused = $('.page-editarea :focus')[0];
      });

      viewer.addHandler('canvas-release', function() {
        setTimeout(function() {
          if (lastFocused) {
            lastFocused.focus();
            lastFocused.setSelectionRange(lastFocused.selectionStart, lastFocused.selectionEnd);
            lastFocused = null;
          }
        }, 100);
      });

      $('[data-filter]').on('input', updateFilters);

      var filters = {
        brightness: 0,
        contrast: 0,
        threshold: 0,
      }

      function updateFilters(e) {
        var input = e.currentTarget;
        var value = parseFloat(input.value);

        Object.assign(filters, { [input.dataset.filter]: value });
        $(e.currentTarget).siblings('.filter_value').text(value > 0 ? `+${value}` : value);

        var processors = [
          OpenSeadragon.Filters.BRIGHTNESS(filters.brightness * 20),
          OpenSeadragon.Filters.CONTRAST(filters.contrast / 5 + 1),
        ];

        if (filters.threshold !== 0) {
          processors.push(OpenSeadragon.Filters.THRESHOLDING((filters.threshold + 10) * 10));
        }

        viewer.setFilterOptions({
          filters: { processors },
          loadMode: 'sync',
        });
      }
    });


-if @page && @page.has_alto?
  -content_for :javascript
    javascript:
      $(function() {
        
        var anno = AnnotoriousOSD.createOSDAnnotator(viewer, {
          // make sure that the boxes over the text annotations are inert
          pointerSelectAction: 'NONE'
        });
        anno.setFormatter(function() { 
          // make the annotation boxes transparent rather than opaque
          return { fillOpacity: 0 };
        });


        // set up the text layer plugin on Annotorious
        var textlayer = OSDTextLayer.mountExtension(anno, {
          label: OSDTextLayer.transcriptionLabel,
          // make labels zoom with the page
          mode: 'fixedPageSize',
          // horizontal position for labels relative to boxes-- offsets are relative to this
          // options are 'center', 'topleft', 'bottomleft'
          position: 'center',
          // Offset from position.  (offsetX is also an option)
          offsetY: 50
        });

        if (#{@page.has_alto?}) {
          textlayer.loadOCR('#{collection_alto_xml_url(@collection.owner, @collection, @page.work, @page)}');
          textlayer.setVisible(false);
          $('#toggle-locked, #toggle-visibility').prop('disabled', false);
          $('#toggle-locked').hide();
        } else {
          textlayer.setVisible(false);
          // disable the buttons for the text layer
          $('#toggle-locked, #toggle-visibility').prop('disabled', true);
          // hide the buttons for the text layer
          $('#toggle-locked, #toggle-visibility').hide();
        };

        const btnLocked = document.getElementById('toggle-locked');
        btnLocked.addEventListener('click', () => {
          if (textlayer.isLocked()) {
            btnLocked.innerHTML = 'Lock for Copy &amp; Paste';
            textlayer.setLocked(false);
          } else {
            btnLocked.innerHTML = 'Unlock';
            textlayer.setLocked(true);
          }
        });


        document.getElementById('toggle-visibility').addEventListener('click', () => {
          textlayer.setVisible(!textlayer.isVisible());
          if(textlayer.isVisible()) {
            $('#toggle-locked').show();
          } else {
            $('#toggle-locked').hide();
          }

        });

      });





noscript
  p t('.open_seadragon_needs_js')
  img(src="/example-images/highsmith/01967v.jpg" height="600")
