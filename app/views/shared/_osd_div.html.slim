=javascript_include_tag "openseadragon.js"
=javascript_include_tag "openseadragon-filtering.js"

.image-toolbar(id="image_toolbar")
  a#osd_zoom_in =svg_symbol "#icon-zoom-in", class: 'icon'
  a#osd_zoom_out =svg_symbol "#icon-zoom-out", class: 'icon'
  a#osd_home =svg_symbol "#icon-fit-view", class: 'icon'
  a#osd_fullpage =svg_symbol "#icon-expand", class: 'icon'
  a#osd_rotate_left =svg_symbol "#icon-rotate-left", class: 'icon'
  a#osd_rotate_right =svg_symbol "#icon-rotate-right", class: 'icon'
  dl.dropdown.right
    dt title="Image filters"
      =svg_symbol "#icon-filters", class: 'icon'
    dd
      .filter
        span.filter_label Brightness
        =range_field_tag 'filter', 0, min: -10, max: 10, step: 1, 'data-filter': 'brightness'
        span.filter_value 0
      .filter
        span.filter_label Contrast
        =range_field_tag 'filter', 0, min: 0, max: 20, step: 1, 'data-filter': 'contrast'
        span.filter_value 0
      .filter
        span.filter_label Threshold
        =range_field_tag 'filter', 0, min: -10, max: 10, step: 1, 'data-filter': 'threshold'
        span.filter_value 0

.image-container(id="image_container")

-content_for :javascript
  javascript:
    OpenSeadragon.DEFAULT_SETTINGS.timeout = 60000;
    $(function() {
      viewer = OpenSeadragon({
        id: "image_container",
        toolbar: "image_toolbar",
        prefixUrl: "",
        crossOriginPolicy: "Anonymous",
        showRotationControl: true,
        gestureSettingsTouch: {
          pinchRotate: true
        },
        zoomInButton: "osd_zoom_in",
        zoomOutButton: "osd_zoom_out",
        homeButton: "osd_home",
        fullPageButton: "osd_fullpage",
        rotateLeftButton: "osd_rotate_left",
        rotateRightButton: "osd_rotate_right",
        maxZoomPixelRatio: 10,
        visibilityRatio: 1,
        fitBounds: true,
        preserveViewport: true,
        sequenceMode: false, //we want fromthepage to handle pages sequentially, rather than openseadragon
        tileSources: #{raw(osd_source(@page))}
      });

      viewer.addHandler('reset-bounds', function() {
        var bounds = viewer.viewport.getBounds();
        var aspect = bounds.height / bounds.width;
        var home = viewer.viewport.getHomeBounds();
        var rect = new OpenSeadragon.Rect(0, Math.min(0, home.y), 1, aspect);
        viewer.viewport.fitBounds(rect, true);
      });

      viewer.addHandler('viewport-change', function() {
        var bounds = viewer.viewport.getBounds();
        localStorage['json_bounds'] = JSON.stringify(bounds);
      });

      viewer.addHandler('open', function() {
        var json_bounds = localStorage['json_bounds'];
        if (json_bounds) {
          var bounds = JSON.parse(json_bounds);
          var rect = new OpenSeadragon.Rect(bounds.x, bounds.y, bounds.width, bounds.height);
          viewer.viewport.fitBounds(rect, true);
        } else {
          viewer.raiseEvent('reset-bounds');
        }
      });

      $('[data-filter]').on('input', updateFilters);

      var filters = {
        brightness: 0,
        contrast: 0,
        threshold: 0,
      }

      function updateFilters(e) {
        var input = e.currentTarget;
        var value = parseFloat(input.value);

        Object.assign(filters, { [input.dataset.filter]: value });
        $(e.currentTarget).siblings('.filter_value').text(value > 0 ? `+${value}` : value);

        var processors = [
          OpenSeadragon.Filters.BRIGHTNESS(filters.brightness * 20),
          OpenSeadragon.Filters.CONTRAST(filters.contrast / 5 + 1),
        ];

        if (filters.threshold !== 0) {
          processors.push(OpenSeadragon.Filters.THRESHOLDING((filters.threshold + 10) * 10));
        }

        viewer.setFilterOptions({
          filters: { processors },
          loadMode: 'sync',
        });
      }
    });

noscript
  p OpenSeadragon is not available unless JavaScript is enabled.
  img(src="/example-images/highsmith/01967v.jpg" height="600")
