=javascript_include_tag "transcribe"

=render({ :partial => '/shared/page_tabs', :locals => { :selected => 3, :page_id => @page.id }})

-editor_class = 'page-editor' + (@auto_fullscreen == 'yes' ? ' fullscreen' : '')

=form_for(@page, :url => { :action => 'save_transcription' }, :html => { class: editor_class }) do |f|
  =hidden_field_tag(:page_id, @page.id)
  =validation_summary @page.errors

  .page-toolbar
    .flex-toolbar
      .flex-toolbar_group
        a.button.outline(data-fullscreen-toggle)
          =svg_symbol "#icon-expand", class: 'icon'
          span.hide-l =t('.fullscreen')
        -layout_modes = { 'ltr' => t('.image_at_the_left'), 'rtl' => t('.image_at_the_right'), 'ttb' => t('.image_at_the_top'), 'btt' => t('.image_at_the_bottom') }
        dl.dropdown.page-columns-layout(data-dropdown='{ "selectable": true }')
          dt.button.outline
            =svg_symbol "#icon-layout-#{@layout_mode}", class: 'icon'
            span.hide-l =t('.layout')
          dd
            -layout_modes.each do |mode, text|
              a(data-layout-set="#{mode}")
                =svg_symbol "#icon-layout-#{mode}", class: 'icon'
                span =text
        dl.dropdown
          dt.button.outline
            =svg_symbol "#icon-filters", class: 'icon'
            span.hide-l =t('.filters')
          dd
            .filter
              span.filter_label Brightness
              =range_field_tag 'filter', 0, min: -10, max: 10, step: 1, 'data-filter': 'brightness'
              span.filter_value 0
            .filter
              span.filter_label Contrast
              =range_field_tag 'filter', 0, min: 0, max: 20, step: 1, 'data-filter': 'contrast'
              span.filter_value 0
            .filter
              span.filter_label Threshold
              =range_field_tag 'filter', 0, min: -10, max: 10, step: 1, 'data-filter': 'threshold'
              span.filter_value 0

      .flex-toolbar_group.hide-m
        label.auto-fullscreen
          =check_box_tag 'auto-fullscreen', 'yes', @auto_fullscreen == 'yes'
          |&nbsp;
          span =t('.always_show_fullscreen')

      .flex-toolbar_group.push-right
        =f.label 'mark_blank', t('.mark_as_blank')
        -if @page.status == Page::STATUS_BLANK
          =f.check_box('mark_blank', {checked: true})
        -else
          =f.check_box('mark_blank', {checked: false})

      .flex-toolbar_group
        =f.label 'needs_review', t('.needs_review')
        -if @page.status == Page::STATUS_NEEDS_REVIEW
          =f.check_box('needs_review', {checked: true})
        -else
          =f.check_box('needs_review', {checked: false})

      .flex-toolbar_group
        -unless @preview_xml
          =button_tag t('.preview'), :name => 'preview', type: 'submit'
        -else
          =button_tag t('.edit'), :name => 'edit', type: 'submit'
        -unless @collection.subjects_disabled || @collection.field_based
          =button_tag t('.autolink'), :name => 'autolink', type: 'submit'
        =button_tag t('.save_changes'), :name => 'save', type: 'submit', id: 'save_button_top', onclick: 'unsavedNotes(event);'

  -if @page.status == Page::STATUS_NEEDS_REVIEW
    .page-review
      =t('.this_page_marked_needs_review')

  .page-columns(data-layout-mode="#{@layout_mode}" data-fullheight='{ "bottom": 30, "cssrule": "height" }')
    .page-column
      .page-imagescan
        =render :partial => '/shared/osd_div'

    div class=(!@collection.field_based ? 'page-column' : 'page-column fieldarea')
      -if @page.status == Page::STATUS_BLANK
        .centered
          .centered_content
            p.nodata_text==t('.this_page_marked_blank')
        .page-editarea(style=("display:none"))
          =f.text_area :source_text

      -else
        -if @collection.voice_recognition
          .page-column_voice
            =image_submit_tag 'mic-icon.png', height: '40', alt: t('.microphone'), class: 'voice', id: 'start_img', onclick: 'startButton(event);'
            span.voice-info

        -if @preview_xml
          .page-preview[*language_attrs(@collection)] ==xml_to_html(@preview_xml)

        .page-editarea(style=("display:none" if @preview_xml) *language_attrs(@collection))
          -if @work.scribes_can_edit_titles
            .page-editarea_title
              =f.label :title, t('.title'), class: 'a50'
              =f.text_field :title
          -if !@collection.field_based
            =f.text_area(:source_text, autocomplete: "off", autocorrect: "off", autocapitalize: "off", spellcheck: false, 'aria-label': t('.edit_transcription'))
          -else
            =render ({partial: 'transcription_field/field_layout', locals: {collection_id: @collection, transcribe: true}})

  .page-toolbar
    .flex-toolbar
      .flex-toolbar_group.push-left.fgfaded =@work.set_transcription_conventions
      .flex-toolbar_group.push-top
        -unless @preview_xml
          =>button_tag t('.preview'), :name => 'preview', type: 'button'
        -else
          =>button_tag t('.edit'), :name => 'edit', type: 'button'
        -unless @collection.subjects_disabled || @collection.field_based
          =>button_tag t('.autolink'), :name => 'autolink', type: 'button'
        =button_tag t('.save_changes'), :name => 'save', type: 'submit', id: 'save_button_bottom', onclick: 'unsavedNotes(event);'

p.fgfaded =render :partial => 'shared/markup_help'

p =link_to t('.more_help'), collection_work_help_path(@collection.owner, @collection, @page.work), target: '_blank'

h2.legend =t('notes_and_questions')
.page-notes
  =render :partial => "notes/notes"

=render({ :partial => '/shared/collection_footer' })

-text_direction = Rtl.rtl?(@collection.text_language) ? 'rtl' : 'ltr'

-if text_direction == 'ltr'
  =render({ :partial => '/shared/codemirror', :locals => { :textarea => "page_source_text", :text_direction => text_direction} })


-unless @current_user_alerted
  -unless current_user.slug.nil?
    -content_for :javascript
      javascript:
        setInterval("transcribe_periodic_timer()", 60000);

        function transcribe_periodic_timer() {
          $.ajax({
            url: "#{collection_transcribe_still_editing_path(current_user.slug, @collection.id, @work.id, @page.id)}",

            complete: function() {
              $(".page-busy-overlay").hide();
            }
          });
        }

        transcribe_periodic_timer();

-content_for :javascript
  javascript:
    //set language for voice to text
    var lang = "#{current_user.dictation_language || @collection.language}";

    $(function() {
      $('[data-fullscreen-toggle]').on('click', function() {
        $(this).toggleClass('pressed');
        $('.page-editor').toggleClass('fullscreen');
        $(window).trigger('resize.FullHeight');
      });

      $('[data-layout-set]').on('click', function() {
        var mode = $(this).data('layout-set');
        Cookies.set('transcribe_layout_mode', mode, { expires: 365 });
        $('[data-layout-mode]').attr('data-layout-mode', mode);
      });

      $('#auto-fullscreen').on('change', function() {
        var checked = this.checked ? 'yes' : 'no';
        Cookies.set('auto_fullscreen', checked, { expires: 365 });
      });

      $('#page_needs_review').click(function(){
        $('#page_mark_blank').prop('checked', false);
      });

      $('#page_mark_blank').click(function(){
        $('#page_needs_review').prop('checked', false);
      });

      $('[data-filter]').on('input', updateFilters);

      var filters = {
        brightness: 0,
        contrast: 0,
        threshold: 0,
      }

      function updateFilters(e) {
        var input = e.currentTarget;
        var value = parseFloat(input.value);

        Object.assign(filters, { [input.dataset.filter]: value });
        $(e.currentTarget).siblings('.filter_value').text(value > 0 ? `+${value}` : value);

        var processors = [
          OpenSeadragon.Filters.BRIGHTNESS(filters.brightness * 20),
          OpenSeadragon.Filters.CONTRAST(filters.contrast / 5 + 1),
        ];

        if (filters.threshold !== 0) {
          processors.push(OpenSeadragon.Filters.THRESHOLDING((filters.threshold + 10) * 10));
        }

        viewer.setFilterOptions({
          filters: { processors },
          loadMode: 'sync',
        });
      }
    });