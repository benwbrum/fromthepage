=stylesheet_link_tag "codemirror/lib/codemirror"
=stylesheet_link_tag "codemirror-buttons/buttons"
=javascript_include_tag "transcribe"
=javascript_include_tag "codemirror/lib/codemirror"
=javascript_include_tag "codemirror/mode/xml/xml"
=javascript_include_tag "codemirror/addon/display/display/panel"
=javascript_include_tag "codemirror/addon/hint/show-hint"
=javascript_include_tag "codemirror/addon/hint/xml-hint"
=javascript_include_tag "codemirror-buttons/buttons"

=render({ :partial => '/shared/page_tabs', :locals => { :selected => 3, :page_id => @page.id }})

-editor_class = 'page-editor' + (@auto_fullscreen == 'yes' ? ' fullscreen' : '')


=form_for(@page, :url => { :action => 'save_transcription' }, :html => { class: editor_class }) do |f|
  =hidden_field_tag(:page_id, @page.id)
  =validation_summary @page.errors

  .page-toolbar
    .toolbar
      .toolbar_group
        a.button.outline(data-fullscreen-toggle) =t('.fullscreen')
      .toolbar_group
        -layout_modes = { 'ltr' => t('.image_at_the_left'), 'rtl' => t('.image_at_the_right'), 'ttb' => t('.image_at_the_top'), 'btt' => t('.image_at_the_bottom') }
        dl.dropdown.page-columns-layout(data-dropdown='{ "selectable": true }')
          dt.button.outline
            =svg_symbol "#icon-layout-#{@layout_mode}", class: 'icon'
            span.hide-l =layout_modes[@layout_mode]
          dd
            -layout_modes.each do |mode, text|
              a(data-layout-set="#{mode}")
                =svg_symbol "#icon-layout-#{mode}", class: 'icon'
                span =text
      .toolbar_group.hide-m
        label.auto-fullscreen
          =check_box_tag 'auto-fullscreen', 'yes', @auto_fullscreen == 'yes'
          |&nbsp;
          span =t('.always_show_fullscreen')

      .toolbar_group.w100.aright
        =f.label 'mark_blank', t('.mark_as_blank')
        -if @page.status == Page::STATUS_BLANK
          =f.check_box('mark_blank', {checked: true})
        -else
          =f.check_box('mark_blank', {checked: false})

      .toolbar_group.w100.aright
        =f.label 'needs_review', t('.needs_review')
        -if @page.status == Page::STATUS_NEEDS_REVIEW
          =f.check_box('needs_review', {checked: true})
        -else
          =f.check_box('needs_review', {checked: false})

      .toolbar_group.w100.alright
        -unless @preview_xml
            =>button_tag t('.preview'), :name => 'preview'
        -else
            =>button_tag t('.edit'), :name => 'edit'
        -unless @collection.subjects_disabled || @collection.field_based
            =>button_tag t('.autolink'), :name => 'autolink'
        =button_tag t('.save_changes'), :name => 'save', id: 'save_button_top', onclick: 'unsavedNotes(event);'

  -if @page.status == Page::STATUS_NEEDS_REVIEW
    .page-review
      =t('.this_page_marked_needs_review')

  .page-columns(data-layout-mode="#{@layout_mode}" data-fullheight='{ "bottom": 30, "cssrule": "height" }')
    .page-column
      .page-imagescan
        =render :partial => '/shared/osd_div'

    div class=(!@collection.field_based ? 'page-column' : 'page-column fieldarea')
      -if @page.status == Page::STATUS_BLANK
        .centered
          .centered_content
            p.nodata_text==t('.this_page_marked_blank')
        .page-editarea(style=("display:none"))
          =f.text_area :source_text

      -else
        -if @collection.voice_recognition
          .page-column_voice
            =image_submit_tag 'mic-icon.png', height: '40', alt: t('.microphone'), class: 'voice', id: 'start_img', onclick: 'startButton(event);'
            span.voice-info

        //.page-column_actions
          -unless @preview_xml
            =>button_tag t('.preview'), :name => 'preview'
          -else
            =>button_tag t('.edit'), :name => 'edit'
          -unless @collection.subjects_disabled || @collection.field_based
            =>button_tag t('.autolink'), :name => 'autolink'
        -if @preview_xml
          .page-preview[*language_attrs(@collection)] ==xml_to_html(@preview_xml)

        .page-editarea(style=("display:none" if @preview_xml) *language_attrs(@collection))
          -if @work.scribes_can_edit_titles
            .page-editarea_title
              span =f.label :title, t('.title'), class: 'a50'
              span =f.text_field :title
          -if !@collection.field_based
            =f.text_area(:source_text, autocomplete: "off", autocorrect: "off", autocapitalize: "off", spellcheck: false)
            =f.label :source_text, t('.edit_transcription'), class: 'hidden'
          -else
            =render ({partial: 'transcription_field/field_layout', locals: {collection_id: @collection, transcribe: true}})

      .page-toolbar-bottom
        .toolbar
          .toolbar_group.w100.aright
            -unless @preview_xml
                =>button_tag t('.preview'), :name => 'preview'
            -else
                =>button_tag t('.edit'), :name => 'edit'
            -unless @collection.subjects_disabled || @collection.field_based
                =>button_tag t('.autolink'), :name => 'autolink'
            =button_tag t('.save_changes'), :name => 'save', id: 'save_button_bottom', onclick: 'unsavedNotes(event);'

.fgfaded ==@work.set_transcription_conventions

.fgfaded.page-indent
  =render :partial => 'shared/markup_help'

.page-indent
  =link_to t('.more_help'), collection_work_help_path(@collection.owner, @collection, @page.work), target: '_blank'

h2.legend =t('notes_and_questions')
.page-notes
  =render :partial => "notes/notes"

=render({ :partial => '/shared/collection_footer' })

-unless @current_user_alerted
  -unless current_user.slug.nil?
    -content_for :javascript
      javascript:
        setInterval("transcribe_periodic_timer()", 60000);

        function transcribe_periodic_timer() {
          $.ajax({
            url: "#{collection_transcribe_still_editing_path(current_user.slug, @collection.id, @work.id, @page.id)}",

            complete: function() {
              $(".page-busy-overlay").hide();
            }
          });
        }

        transcribe_periodic_timer();

-content_for :javascript
  javascript:
    //set language for voice to text
    var lang = "#{current_user.dictation_language || @collection.language}";

    $(function() {
      $('[data-fullscreen-toggle]').on('click', function() {
        $(this).toggleClass('pressed');
        $('.page-editor').toggleClass('fullscreen');
        $(window).trigger('resize.FullHeight');
      });
      $('[data-layout-set]').on('click', function() {
        var mode = $(this).data('layout-set');
        Cookies.set('transcribe_layout_mode', mode, { expires: 365 });
        $('[data-layout-mode]').attr('data-layout-mode', mode);
      });
      $('#auto-fullscreen').on('change', function() {
        var checked = this.checked ? 'yes' : 'no';
        Cookies.set('auto_fullscreen', checked, { expires: 365 });
      });

      $('#page_needs_review').click(function(){
        $('#page_mark_blank').prop('checked', false);
      });

      $('#page_mark_blank').click(function(){
        $('#page_needs_review').prop('checked', false);
      });

    });
-if feature_enabled?(:codemirror) || [46191, 45477].include?(@work.id)
  -content_for :javascript
    javascript:
      var button_config = [
        {
          hotkey: 'Ctrl-^',
          class: 'sup',
          label: 'sup',
          callback: function (cm) {
            var selection = cm.getSelection();
            cm.replaceSelection('<hi rend="sup">' + selection + '</hi>');
            if (!selection) {
              var cursorPos = cm.getCursor();
              cm.setCursor(cursorPos.line, cursorPos.ch - 5);
            }
          }
        },
        {
          hotkey: 'Ctrl-%',
          class: 'strike',
          label: 'str',
          callback: function (cm) {
            var selection = cm.getSelection();
            cm.replaceSelection('<hi rend="str">' + selection + '</hi>');
            if (!selection) {
              var cursorPos = cm.getCursor();
              cm.setCursor(cursorPos.line, cursorPos.ch - 5);
            }
          }
        },
        {
          hotkey: 'Ctrl-u',
          class: 'u',
          label: 'u',
          callback: function (cm) {
            var selection = cm.getSelection();
            cm.replaceSelection('<hi rend="underline">' + selection + '</hi>');
            if (!selection) {
              var cursorPos = cm.getCursor();
              cm.setCursor(cursorPos.line, cursorPos.ch - 5);
            }
          }
        },
        {
          hotkey: 'Ctrl-d',
          class: 'italic',
          label: 'date',
          callback: function (cm) {
            var selection = cm.getSelection();
            cm.replaceSelection('<date when="">' + selection + '</date>');
            if (!selection) {
              var cursorPos = cm.getCursor();
              cm.setCursor(cursorPos.line, cursorPos.ch - 7);
            } else {
              var cursorPos = cm.getCursor();
              cm.setCursor(cursorPos.line, cursorPos.ch - 7 - selection.length - 2);
            }
          }
        },
        {
          hotkey: 'Ctrl-H',
          class: 'italic',
          label: 'fig',
          callback: function (cm) {
            var selection = cm.getSelection();
            cm.replaceSelection('<figure rend="hr">' + selection + '</figure>');
            if (!selection) {
              var cursorPos = cm.getCursor();
              cm.setCursor(cursorPos.line, cursorPos.ch - 9);
            }
          }
        },
        {
          hotkey: 'Ctrl-U',
          class: 'italic',
          label: 'unclear',
          callback: function (cm) {
            var selection = cm.getSelection();
            cm.replaceSelection('<unclear>' + selection + '</unclear>');
            if (!selection) {
              var cursorPos = cm.getCursor();
              cm.setCursor(cursorPos.line, cursorPos.ch - 10);
            }
          }
        }];


  -if @collection.owner.slug == 'stanfordlibraries' #image du monde
    -content_for :javascript
      javascript:
        var button_config = [
          {
            hotkey: 'Ctrl-E',
            class: 'italic',
            label: 'expan',
            callback: function (cm) {
              var selection = cm.getSelection();
              cm.replaceSelection('<expan orig="">' + selection + '</expan>');
              if (!selection) {
                var cursorPos = cm.getCursor();
                cm.setCursor(cursorPos.line, cursorPos.ch - 8);
              } else {
                var cursorPos = cm.getCursor();
                cm.setCursor(cursorPos.line, cursorPos.ch - 8 - selection.length - 2);
              }
            }
          },
          {
            class: 'red',
            label: 'red',
            callback: function (cm) {
              var selection = cm.getSelection();
              cm.replaceSelection('<span style="color:red;">' + selection + '</span>');
              if (!selection) {
                var cursorPos = cm.getCursor();
                cm.setCursor(cursorPos.line, cursorPos.ch - 7);
              }
            }
          },
          {
            class: 'blue',
            label: 'blue',
            callback: function (cm) {
              var selection = cm.getSelection();
              cm.replaceSelection('<span style="color:blue;">' + selection + '</span>');
              if (!selection) {
                var cursorPos = cm.getCursor();
                cm.setCursor(cursorPos.line, cursorPos.ch - 7);
              }
            }
          },
          {
            hotkey: 'Ctrl-^',
            class: 'sup',
            label: 'sup',
            callback: function (cm) {
              var selection = cm.getSelection();
              cm.replaceSelection('<hi rend="sup">' + selection + '</hi>');
              if (!selection) {
                var cursorPos = cm.getCursor();
                cm.setCursor(cursorPos.line, cursorPos.ch - 5);
              }
            }
          },
          {
            hotkey: 'Ctrl-%',
            class: 'strike',
            label: 'str',
            callback: function (cm) {
              var selection = cm.getSelection();
              cm.replaceSelection('<hi rend="str">' + selection + '</hi>');
              if (!selection) {
                var cursorPos = cm.getCursor();
                cm.setCursor(cursorPos.line, cursorPos.ch - 5);
              }
            }
          },
          {
            hotkey: 'Ctrl-u',
            class: 'u',
            label: 'u',
            callback: function (cm) {
              var selection = cm.getSelection();
              cm.replaceSelection('<hi rend="underline">' + selection + '</hi>');
              if (!selection) {
                var cursorPos = cm.getCursor();
                cm.setCursor(cursorPos.line, cursorPos.ch - 5);
              }
            }
          },
          {
            hotkey: 'Ctrl-U',
            class: 'italic',
            label: 'unclear',
            callback: function (cm) {
              var selection = cm.getSelection();
              cm.replaceSelection('<unclear>' + selection + '</unclear>');
              if (!selection) {
                var cursorPos = cm.getCursor();
                cm.setCursor(cursorPos.line, cursorPos.ch - 10);
              }
            }
          }];

  -if @collection.owner.slug == 'cwrgm'
    -content_for :javascript
      javascript:
        var button_config = [
          {
            hotkey: 'Ctrl-P',
            class: 'sup',
            label: 'sup',
            callback: function (cm) {
              var selection = cm.getSelection();
              cm.replaceSelection('<sup>' + selection + '</sup>');
              if (!selection) {
                var cursorPos = cm.getCursor();
                cm.setCursor(cursorPos.line, cursorPos.ch - 6);
              }
            }
          },
          {
            hotkey: 'Ctrl-S',
            class: 'strike',
            label: 'str',
            callback: function (cm) {
              var selection = cm.getSelection();
              cm.replaceSelection('<s>' + selection + '</s>');
              if (!selection) {
                var cursorPos = cm.getCursor();
                cm.setCursor(cursorPos.line, cursorPos.ch - 4);
              }
            }
          },
          {
            hotkey: 'Ctrl-U',
            class: 'u',
            label: 'u',
            callback: function (cm) {
              var selection = cm.getSelection();
              cm.replaceSelection('<u>' + selection + '</u>');
              if (!selection) {
                var cursorPos = cm.getCursor();
                cm.setCursor(cursorPos.line, cursorPos.ch - 4);
              }
            }
          },
          {
            hotkey: 'Ctrl-G',
            class: 'italic',
            label: 'gap',
            callback: function (cm) {
              var selection = cm.getSelection();
              cm.replaceSelection('<gap>' + selection + '</gap>');
              if (!selection) {
                var cursorPos = cm.getCursor();
                cm.setCursor(cursorPos.line, cursorPos.ch - 6);
              }
            }
          },
          { 
            class: 'subscript',
            label: 'sub',
            callback: function (cm) {
              var selection = cm.getSelection();
              cm.replaceSelection('<sub>' + selection + '</sub>');
              if (!selection) {
                var cursorPos = cm.getCursor();
                cm.setCursor(cursorPos.line, cursorPos.ch - 6);
              }
            }
          }];



  -content_for :javascript
    javascript:
      var fromthepage_tags = {
        "!top": ["add", "cb", "date", "expan", "figure", "gap", "hi", "milestone", "stamp", "sub", "sup", "table", "unclear", "u", "strike", "s", "span", "a"],
        add: { children: ["u", "s"] },
        cb: { attrs: { "n": null } },
        date: {attrs: { when: "YYYY-MM-DD" }, children: ["hi", "unclear", "gap"] },
        expan: {attrs: { orig: null }},
        figure: { attrs: { "type": ["hr", "postmark", "seal"] }},
        hi: { attrs: { "rend": ["bold", "italic", "str", "sub", "sup", "underline"]}},
        milestone: { attrs: { "unit": ["column"], "n": null}},
        row: { children: ["cell"] },
        stamp: { attrs: {"type": ["clerical", "postage", "revenue"]}},
        sup: { children: ["u", "s"] },
        table: { attrs: {"rend": ["rules"]}, children: ["row"] }
      }


      function completeAfter(cm, pred) {
        var cur = cm.getCursor();
        if (!pred || pred()) setTimeout(function() {
          if (!cm.state.completionActive)
            cm.showHint({completeSingle: false});
        }, 100);
        return CodeMirror.Pass;
      }

      function completeIfAfterLt(cm) {
        return completeAfter(cm, function() {
          var cur = cm.getCursor();
          return cm.getRange(CodeMirror.Pos(cur.line, cur.ch - 1), cur) == "<";
        });
      }

      function completeIfInTag(cm) {
        return completeAfter(cm, function() {
          var tok = cm.getTokenAt(cm.getCursor());
          if (tok.type == "string" && (!/['"]/.test(tok.string.charAt(tok.string.length - 1)) || tok.string.length == 1)) return false;
          var inner = CodeMirror.innerMode(cm.getMode(), tok.state).state;
          return inner.tagName;
        });
      }

      var myCodeMirror = CodeMirror.fromTextArea(
        document.getElementById("page_source_text"),
        {
          lineNumbers: true, 
          mode: "xml",
          extraKeys: {
            "'<'": completeAfter,
            "'/'": completeIfAfterLt,
            "' '": completeIfInTag,
            "'='": completeIfInTag,
            "Ctrl-Space": "autocomplete",
            "Tab": "autocomplete"
          },
          lineWrapping: true,
          hintOptions: {schemaInfo: fromthepage_tags},
          buttons: button_config
          });

          myCodeMirror.setSize("100%", "100%");
