<div class="inside-column" id="zoom_div">
	<div id="containerdiv">
		<div id="BookReader" style="left:10px; right:10px; top:10px; bottom:2em;">x</div>
		    <link rel="stylesheet" type="text/css" href="../BookReader/BookReader.css">
		    <script type="text/javascript" src="http://www.archive.org/download/BookReader/lib/jquery-1.2.6.min.js"></script>
		    <script type="text/javascript" src="http://www.archive.org/download/BookReader/lib/jquery.easing.1.3.js"></script>
		    <script type="text/javascript" src="../BookReader/BookReader.js"></script>
		    <script type="text/javascript" src="../BookReader/dragscrollable.js"></script>
		    <%= stylesheet_link_tag 'iaoverride' %>

	<script type="text/javascript" language="javascript">
		     jQuery.noConflict();

//
// This file is a copy of the dynamically-generated Internet Archive stuff
//
br = new BookReader();

br.titleLeaf = 3;

br.getPageWidth = function(index) {
    return this.pageW[index];
}

br.getPageHeight = function(index) {
    return this.pageH[index];
}

// Returns true if page image is available rotated
br.canRotatePage = function(index) {
    return 'jp2' == this.imageFormat; // Assume single format for now
}

// reduce defaults to 1 (no reduction)
// rotate defaults to 0 (no rotation)
br.getPageURI = function(index, reduce, rotate) {
    var _reduce;
    var _rotate;

    if ('undefined' == typeof(reduce)) {
        _reduce = 1;
    } else {
        _reduce = reduce;
    }
    if ('undefined' == typeof(rotate)) {
        _rotate = 0;
    } else {
        _rotate = rotate;
    }

    var file = this._getPageFile(index);

    // $$$ add more image stack formats here
    return 'http://'+this.server+'/BookReader/BookReaderImages.php?zip='+this.zip+'&file='+file+'&scale='+_reduce+'&rotate='+_rotate;
}

br._getPageFile = function(index) {
    var leafStr = '0000';
    var imgStr = this.leafMap[index].toString();
    var re = new RegExp("0{"+imgStr.length+"}$");

    var insideZipPrefix = this.subPrefix.match('[^/]+$');
    var file = insideZipPrefix + '_' + this.imageFormat + '/' + insideZipPrefix + '_' + leafStr.replace(re, imgStr) + '.' + this.imageFormat;

    return file;
}

br.getPageSide = function(index) {
    //assume the book starts with a cover (right-hand leaf)
    //we should really get handside from scandata.xml


    // $$$ we should get this from scandata instead of assuming the accessible
    //     leafs are contiguous
    if ('rl' != this.pageProgression) {
        // If pageProgression is not set RTL we assume it is LTR
        if (0 == (index & 0x1)) {
            // Even-numbered page
            return 'R';
        } else {
            // Odd-numbered page
            return 'L';
        }
    } else {
        // RTL
        if (0 == (index & 0x1)) {
            return 'L';
        } else {
            return 'R';
        }
    }
}

br.getPageNum = function(index) {
    var pageNum = this.pageNums[index];
    if (pageNum) {
        return pageNum;
    } else {
        return 'n' + index;
    }
}

// Single images in the Internet Archive scandata.xml metadata are (somewhat incorrectly)
// given a "leaf" number.  Some of these images from the scanning process should not
// be displayed in the BookReader (for example colour calibration cards).  Since some
// of the scanned images will not be displayed in the BookReader (those marked with
// addToAccessFormats false in the scandata.xml) leaf numbers and BookReader page
// indexes are generally not the same.  This function returns the BookReader page
// index given a scanned leaf number.
//
// This function is used, for example, to map between search results (that use the
// leaf numbers) and the displayed pages in the BookReader.
br.leafNumToIndex = function(leafNum) {
    for (var index = 0; index < this.leafMap.length; index++) {
        if (this.leafMap[index] == leafNum) {
            return index;
        }
    }

    return null;
}

// This function returns the left and right indices for the user-visible
// spread that contains the given index.  The return values may be
// null if there is no facing page or the index is invalid.
br.getSpreadIndices = function(pindex) {
    // $$$ we could make a separate function for the RTL case and
    //      only bind it if necessary instead of always checking
    // $$$ we currently assume there are no gaps

    var spreadIndices = [null, null];
    if ('rl' == this.pageProgression) {
        // Right to Left
        if (this.getPageSide(pindex) == 'R') {
            spreadIndices[1] = pindex;
            spreadIndices[0] = pindex + 1;
        } else {
            // Given index was LHS
            spreadIndices[0] = pindex;
            spreadIndices[1] = pindex - 1;
        }
    } else {
        // Left to right
        if (this.getPageSide(pindex) == 'L') {
            spreadIndices[0] = pindex;
            spreadIndices[1] = pindex + 1;
        } else {
            // Given index was RHS
            spreadIndices[1] = pindex;
            spreadIndices[0] = pindex - 1;
        }
    }

    //console.log("   index %d mapped to spread %d,%d", pindex, spreadIndices[0], spreadIndices[1]);

    return spreadIndices;
}

// Remove the page number assertions for all but the highest index page with
// a given assertion.  Ensures there is only a single page "{pagenum}"
// e.g. the last page asserted as page 5 retains that assertion.
br.uniquifyPageNums = function() {
    var seen = {};

    for (var i = br.pageNums.length - 1; i--; i >= 0) {
        var pageNum = br.pageNums[i];
        if ( !seen[pageNum] ) {
            seen[pageNum] = true;
        } else {
            br.pageNums[i] = null;
        }
    }

}

br.cleanupMetadata = function() {
    br.uniquifyPageNums();
}

// getEmbedURL
//________
// Returns a URL for an embedded version of the current book
br.getEmbedURL = function() {
    // We could generate a URL hash fragment here but for now we just leave at defaults
    var url = 'http://' + window.location.host + '/stream/'+this.bookId;
    if (this.subPrefix != this.bookId) { // Only include if needed
        url += '/' + this.subPrefix;
    }
    url += '?ui=embed';
    return url;
}

// getEmbedCode
//________
// Returns the embed code HTML fragment suitable for copy and paste
br.getEmbedCode = function() {
    return "<iframe src='" + this.getEmbedURL() + "' width='480px' height='430px'></iframe>";
}


// these can be extrapolated from the file ID_scandata.xml
// book->pageData->page->cropbox->w
// question: why is this populated from leaf 3 on, rather than leaf 0?
// answer: see comments above
//
// these can also be extrapolated from the file ID_djvu.xml
// DjVuXML->BODY->OBJECT attr:width
br.pageW = [ <%= @page.ia_leaf.page_w %>];

// these can be extrapolated from the file ID_scandata.xml
// book->pageData->page->cropbox->h
//
// these can also be extrapolated from the file ID_djvu.xml
// DjVuXML->BODY->OBJECT attr:height , whence also page titles can be received
br.pageH = [ <%= @page.ia_leaf.page_h %>];

br.leafMap = [<%= @page.ia_leaf.leaf_number %>];

br.pageNums = [ '<%=@page.ia_leaf.page_number%>'];


br.numLeafs = br.pageW.length;


// bookPath and server may be derived from hitting the stream url -- see
//  lynx -source "http://www.archive.org/stream/1941fieldnosla00klau"
// output js include file


/*
 *
 * br.bookId   = 'Jeremiah_White_Graves_Diary_Volume_2_Book_01';
 * br.zip      = '/33/items/Jeremiah_White_Graves_Diary_Volume_2_Book_01/JWGravesVol2Book01_jp2.zip';
 * br.subPrefix = 'JWGravesVol2Book01';
 * br.server   = 'ia600607.us.archive.org';
 * br.bookTitle= 'Diary of Jeremiah White Graves, Volume 2, Book 1';
 * br.bookPath = '/33/items/Jeremiah_White_Graves_Diary_Volume_2_Book_01/JWGravesVol2Book01';
 * br.bookUrl  = 'http://www.archive.org/details/Jeremiah_White_Graves_Diary_Volume_2_Book_01';
 * br.imageFormat = 'jp2';
 * br.archiveFormat = 'zip';

 *
 */


// derived by text input or browser
br.bookId   = '<%=@work.ia_work.book_id%>';
br.zip      = '<%=@work.ia_work.ia_path%>/<%=@work.ia_work.zip_file%>';
br.subPrefix = '<%=@work.ia_work.sub_prefix%>';
br.server   = '<%=@work.ia_work.server %>';
br.bookTitle= '<%=@work.ia_work.title%>';
br.bookPath = '<%=@work.ia_work.book_path%>';
br.bookUrl  = 'http://www.archive.org/details/<%=@work.ia_work.book_id%>';
br.imageFormat = '<%=@work.ia_work.image_format%>';
br.archiveFormat = '<%=@work.ia_work.archive_format%>';

br.pageProgression = 'lr';
// Check for config object
// $$$ change this to use the newer params object
if (typeof(brConfig) != 'undefined') {
    if (typeof(brConfig["ui"]) != 'undefined') {
        br.ui = brConfig["ui"];
    }

    if (brConfig['mode'] == 1) {
        br.mode = 1;
        if (typeof(brConfig['reduce'] != 'undefined')) {
            br.reduce = brConfig['reduce'];
        }
    } else if (brConfig['mode'] == 2) {
        br.mode = 2;

    }
} // brConfig

br.cleanupMetadata();
br.init();

	</script>
		</div>
    </div>
</div>
