  section.collection-stats
    .collection-stats_counters
      .counter(data-prefix="#{number_with_delimiter stats[:works]}") #{t('.work', count: stats[:works])}
      .counter(data-prefix="#{number_with_delimiter stats[:pages]}") #{t('.page', count: stats[:pages])}
      .counter(data-prefix="#{number_with_delimiter stats[DeedType::NOTE_ADDED]}") #{t('.note', count: stats[DeedType::NOTE_ADDED])}
      -unless subjects_disabled
        .counter(data-prefix="#{number_with_delimiter stats[:subjects]}") #{t('.subject', count: stats[:subjects])}
        .counter(data-prefix="#{number_with_delimiter stats[:mentions]}") #{t('.reference', count: stats[:mentions])}
      .counter(data-prefix="#{number_with_delimiter stats[:contributors]}") #{t('.collaborator', count: stats[:contributors])}
    .collection-stats_counters
      .counter(data-prefix="#{number_with_delimiter stats[:pages_transcribed]}") #{t('.page_transcribed', count: stats[:pages_transcribed])}
      .counter(data-prefix="#{number_with_delimiter stats[:works_transcribed]}") #{t('.work_transcribed', count: stats[:works_transcribed])}
      .counter(data-prefix="#{number_with_delimiter stats[:pages_incomplete]}") #{t('.incomplete_page', count: stats[:pages_incomplete])}
      .counter(data-prefix="#{number_with_delimiter stats[:pages_needing_review]}") #{t('.page_needing_review', count: stats[:pages_needing_review])}
      .counter(data-prefix="#{number_with_delimiter stats[DeedType::PAGE_REVIEWED]}") #{t('.page_reviewed', count: stats[DeedType::PAGE_REVIEWED])}
      .counter(data-prefix="#{number_with_delimiter stats[DeedType::PAGE_EDIT]}") #{t('.page_edit', count: stats[DeedType::PAGE_EDIT])}
      -unless subjects_disabled
        .counter(data-prefix="#{number_with_delimiter stats[DeedType::PAGE_INDEXED]}") #{t('.page_indexed', count: stats[DeedType::PAGE_INDEXED])}
      -if @collection.works.where(supports_translation: true).exists?
        .counter(data-prefix="#{number_with_delimiter stats[DeedType::PAGE_TRANSLATED]}") #{t('.page_translated', count: stats[DeedType::PAGE_TRANSLATED])} 
      -if @collection.works.where(ocr_correction: true).exists?
        .counter(data-prefix="#{number_with_delimiter stats[DeedType::OCR_CORRECTED]}") #{t('.ocr_correction', count: stats[DeedType::OCR_CORRECTED])}
      -if @collection.metadata_entry?      
        .counter(data-prefix="#{number_with_delimiter stats[:descriptions]}") #{t('.works_described', count: stats[:descriptions])}
      -if stats[:line_count] > 0
        -if @collection.field_based
          .counter(data-prefix="#{number_with_delimiter stats[:line_count]}") #{t('.records_indexed', count: stats[:line_count])}
        -else
          .counter(data-prefix="#{number_with_delimiter stats[:line_count]}") #{t('.lines_transcribed', count: stats[:line_count])}


