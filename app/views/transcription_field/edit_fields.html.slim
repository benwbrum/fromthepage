=render({ :partial => '/shared/collection_tabs', :locals => { :selected => 10, :collection_id => @collection }})

div.columns
  div.maincol
    h2 =t('.edit_transcription_fields')
    =form_tag transcription_field_add_fields_path
      =hidden_field_tag(:collection_id, @collection.id)
      table.field-form#new-fields
        -unless @current_fields.blank?
          -@current_fields.group_by(&:line_number).each do |line, field|
            tbody
              =render ({partial: 'line_form', locals: {line_number: "Line #{line}"}})
              -field.each do |field|
                =render ({ partial: 'new_field_form', locals: {collection_id: @collection, field: field}})
        -else
          tbody
            =render ({partial: 'line_form', locals: {line_number: "Line 1"}})
            -3.times do
              =render ({ partial: 'new_field_form', locals: {collection_id: @collection, line_number: 1}})
      .flex-toolbar
        .flex-toolbar_group
          =button_tag t('.add_additional_line'), type: 'button', id: 'add-line', class: 'button', remote: true
          =button_tag t('.add_additional_field'), type: 'button', id: 'add-field', class: 'button'
        .flex-toolbar_group.push-right
          =button_tag t('.save'), name: 'save', type: 'submit', class: 'button'
          =link_to t('.cancel'), edit_collection_path(@collection.owner, @collection), class: 'button'
          =button_tag t('.done'), name: 'done', type: 'submit', class: 'button'

    h2 =t('.preview')
    =render({partial: 'field_layout', locals: {collection_id: @collection}})

-content_for :javascript
  javascript:
    $(function() {
      var sortableConfig = {
        axis: 'y',
        items: 'tr.sortable-field',
        connectWith: '#new-fields tbody',
        forceHelperSize: true,
        forcePlaceholderSize: true,
        update: function(e, ui) {
          var line = $(this).index() + 1;
          var data = $(this).sortable('serialize');
          if (data) {
            $.ajax({
              url: "#{transcription_field_reorder_path(collection_id: @collection.id)}",
              type: "PATCH",
              data: `${data}&line=${line}`,
            });
          }
        },
      };

      $('#new-fields tbody').sortable(sortableConfig);

      $('#new-fields').on('click', '[data-delete-field]', function() {
        var lineCount = $(this).closest('table').find('tbody').length;
        var fieldCount = $(this).closest('tbody').find('.sortable-field').length;
        console.log('REMOVE', lineCount, fieldCount);
        if (lineCount > 1 && fieldCount === 1) {
          $(this).closest('tbody').remove();
        } else if (fieldCount > 1) {
          $(this).closest('tr').remove();
        }
      });

      $('#add-field').click(function(e) {
        $('#new-fields tbody').last().append("#{j render partial: 'new_field_form', locals: {collection_id: @collection, line_number: 'new'}}");
      });

      $('#add-line').click(function(e) {
        var lineCount = $('.field-form_line').last().text();
        $.ajax({
          method: 'GET',
          url: '/transcription_field/line_form',
          data: {line_count: lineCount},
          complete: function() {
            $('#new-fields tbody').sortable(sortableConfig);
          }
        });
      });

      $(document).on('change', '.input_type', function() {
        addOptions(this,1);
      })

      $('#new-fields tr.sortable-field').each(function() {
        var optionsObj = $(this).find('.field-options')[0];
        var index = $(this).find('.input_type')[0].options.selectedIndex;
        if (index == 1) {
          $(optionsObj).prop('disabled', false);
        };
      })
    });
