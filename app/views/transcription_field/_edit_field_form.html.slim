=form_tag transcription_field_add_fields_path
    =hidden_field_tag(:collection_id, @collection.id)
    =hidden_field_tag(:field_type, field_type)
    -if field_type == TranscriptionField::FieldType::METADATA
      table.form
        tbody
          tr
            td(colspan="2")
              =label_tag :data_entry_type, t('.data_entry_type_label'), class: "above"
              br
              =radio_button_tag :data_entry_type, Collection::DataEntryType::TEXT_AND_METADATA, @collection.data_entry_type == Collection::DataEntryType::TEXT_AND_METADATA 
              =label_tag "data_entry_type_#{Collection::DataEntryType::TEXT_AND_METADATA}", t('.data_entry_type_text_and_metadata')
              br
              =radio_button_tag :data_entry_type, Collection::DataEntryType::METADATA_ONLY, @collection.data_entry_type == Collection::DataEntryType::METADATA_ONLY
              =label_tag "data_entry_type_#{Collection::DataEntryType::METADATA_ONLY}", t('.data_entry_type_metadata_only')
    table.field-form#new-fields
      -unless @current_fields.blank?
        -@current_fields.group_by(&:line_number).each do |line, field|
          tbody
            =render ({partial: 'line_form', locals: {line_number: "Line #{line}"}})
            -field.each do |field|
              =render ({ partial: 'new_field_form', locals: {collection_id: @collection, field: field, field_type: field_type}})
      -else
        tbody
          =render ({partial: 'line_form', locals: {line_number: "Line 1"}})
          -3.times do
            =render ({ partial: 'new_field_form', locals: {collection_id: @collection, line_number: 1, field_type: field_type}})
    .flex-toolbar
      .flex-toolbar_group
        =button_tag t('.add_additional_line'), type: 'button', id: 'add-line', class: 'button', remote: true
        =button_tag t('.add_additional_field'), type: 'button', id: 'add-field', class: 'button'
      -if field_type != TranscriptionField::FieldType::METADATA
        .flex-toolbar_group.push-right
          =button_tag t('.save'), name: 'save', type: 'submit', class: 'button'
          =link_to t('.cancel'), edit_collection_path(@collection.owner, @collection), class: 'button'
          =button_tag t('.done'), name: 'done', type: 'submit', class: 'button'
    -if field_type == TranscriptionField::FieldType::METADATA
      table.form
        tbody
          tr
            td(colspan="1")
              =label_tag :description_instructions, t('.description_instructions_label'), class: "above"
              =text_area_tag :description_instructions, @collection.description_instructions, :rows => 4
      .flex-toolbar
        .flex-toolbar_group.push-right
          =button_tag t('.save'), name: 'save', type: 'submit', class: 'button'
          =link_to t('.cancel'), edit_collection_path(@collection.owner, @collection), class: 'button'
          =button_tag t('.done'), name: 'done', type: 'submit', class: 'button'

h2 =t('.preview')
div.fields-preview
  -if field_type == TranscriptionField::FieldType::METADATA
    =render({partial: 'metadata_field_layout', locals: {collection_id: @collection, owner_preview: true}})
    -if @collection.description_instructions.present?
      .fgfaded ==@collection.description_instructions
  -else
    =render({partial: 'field_layout', locals: {collection_id: @collection}})

-content_for :javascript
  javascript:
    $(function() {
      var sortableConfig = {
        axis: 'y',
        items: 'tr.sortable-field',
        connectWith: '#new-fields tbody',
        forceHelperSize: true,
        forcePlaceholderSize: true,
        update: function(e, ui) {
          var line = $(this).index() + 1;
          var data = $(this).sortable('serialize');
          ui.item.find('input[id=transcription_fields__line_number]').val(line);
          if (data) {
            $.ajax({
              url: "#{transcription_field_reorder_path(collection_id: @collection.id)}",
              type: "PATCH",
              data: `${data}&line=${line}`,
            });
          }
        },
      };

      $('#new-fields tbody').sortable(sortableConfig);

      $('#new-fields').on('click', '[data-delete-field]', function() {
        var lineCount = $(this).closest('table').find('tbody').length;
        var fieldCount = $(this).closest('tbody').find('.sortable-field').length;
        console.log('REMOVE', lineCount, fieldCount);
        if (lineCount > 1 && fieldCount === 1) {
          $(this).closest('tbody').remove();
        } else if (fieldCount > 1) {
          $(this).closest('tr').remove();
        }
      });

      $('#add-field').click(function(e) {
        $('#new-fields tbody').last().append("#{j render partial: 'new_field_form', locals: {collection_id: @collection, line_number: 'new', field_type: field_type}}");
      });

      $('#add-line').click(function(e) {
        var lineCount = $('.field-form_line').last().text();
        $.ajax({
          method: 'GET',
          url: '/transcription_field/line_form',
          data: {line_count: lineCount, field_type: "#{field_type}"},
          complete: function() {
            $('#new-fields tbody').sortable(sortableConfig);
          }
        });
      });

      $(document).on('change', '.input_type', function() {
        addOptions(this,1);
      })

      $('#new-fields tr.sortable-field').each(function() {
        var optionsObj = $(this).find('.field-options')[0];
        var index = $(this).find('.input_type')[0].options.selectedIndex;
        if (index == 1) {
          $(optionsObj).prop('disabled', false);
        };
      })
    });
