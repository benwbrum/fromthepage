-content_for :javascript
  javascript:
    $(document).ready(function() {
      $('.title').click(function(){
        $(this).parent().next().toggle();
      });
    });

=render({ :partial => '/shared/work_tabs', :locals => { :selected => 6, :work_id => @work.id }})

.columns
  article.maincol
    =form_for :work, url: work_update_path(id: @work.id), html: {id: :update} do |f|
      =hidden_field_tag :collection_id, @collection.slug
      =validation_summary @work.errors
      table.form.settings
        tr.big
          th =f.label :title, t('.work_title')
          td.w100 =f.text_field :title, value: @work.title
        tr
          th =f.label :collection_id, t('.collection')
          td =f.collection_select(:collection_id, @collections, :id, :title)
        tr
          th =f.label :document_set_ids, t('.document_sets')
          td#document_sets
            =render partial: 'document_sets_select', locals: { document_sets: @work.collection&.document_sets, selected_document_sets: @work.document_sets.pluck(:id) }
        tr
          th =f.label :slug, t('.url')
          td =f.text_field :slug, value: @work.slug
        tr
          th.hidden= t('.url')
          td
            p.nomargin.settings =t('.current_url', current_url: "<b>#{collection_read_work_url( @work.collection.owner.slug, @work.collection.slug, @work.slug)}</b>").html_safe
        tr
          th =f.label :identifier, t('.identifier')
          td =f.text_field :identifier, value: @work.identifier
        tr
          th.hidden= t('.identifier')
          td
            p.nomargin.settings= t('.identifier_description')
        tr
          td(colspan="2")
            =f.check_box :pages_are_meaningful, value: @work.pages_are_meaningful
            |&nbsp;
            =f.label :pages_are_meaningful, t('.pages_are_meaningful')
            br
            span.settings= t('.pages_are_meaningful_description')

        tr
          td(colspan="2")
            =f.check_box :ocr_correction, value: @work.ocr_correction
            |&nbsp;
            =f.label :ocr_correction, t('.enable_ocr_correction')
            br
            span.settings= t('.enable_ocr_correction_description')
        tr
          td(colspan="2")
            =f.label :description, t('.description'), class: 'above'
            br: i =t('.description_message')
            =f.text_area :description, rows: 5, value: @work.description
        tr
          td(colspan="2")
            =f.label :transcription_conventions, t('.transcription_conventions'), class: 'above'
            br: i =t('.transcription_conventions_message')
            =f.text_area :transcription_conventions, rows: 5, value: @work.set_transcription_conventions
        tr
          td(colspan="2")
            .aright
              -if @work.transcription_conventions.present?
                => t('.revert_transcription_conventions_description')
                =button_tag t('.revert'), :work_id => @work.id, type: 'button', hidden: false, id: 'revert'
              -else
                =button_tag t('.revert'), :work_id => @work.id, type: 'button', hidden: true, id: 'revert'

        tr
          td(colspan="2")
            =f.check_box :supports_translation, value: @work.supports_translation
            |&nbsp;
            =f.label :supports_translation, t('.support_translation')
            br
            span.settings= t('.support_translation_description')
        tr
          td(colspan="2")
            =f.label :translation_instructions, t('.translation_instructions'), class: 'above'
            =f.text_area :translation_instructions, rows: 5, value: @work.translation_instructions

      h3
        a(href="#" class="title" onclick="return false;" id="import-iiif-manifest") =t('.additional_metadata')

      table.form.settings style="display: none"
        tr
          td(colspan="2")= t('.additional_metadata_description')
        tr
          th =f.label :author, t('.author')
          td =f.text_field :author, value: @work.author
        tr
          th =f.label :recipient, t('.recipient')
          td =f.text_field :recipient, value: @work.recipient
        tr
          th =f.label :location_of_composition, t('.place_of_creation')
          td =f.text_field :location_of_composition, value: @work.location_of_composition
        tr
          th =f.label :document_date, t('.document_date')
          td =f.text_field :document_date, value: @work.document_date, placeholder: 'yyyy-mm-dd'
        tr
          th.hidden= t('.document_date')
          td =t('.document_date_hint')
        tr
          th =f.label :genre, t('.genre')
          td =f.text_field :genre, value: @work.genre
        tr
          th =f.label :source_location, t('.source_location')
          td =f.text_field :source_location, value: @work.source_location
        tr
          th =f.label :source_collection_name, t('.source_collection_name')
          td =f.text_field :source_collection_name, value: @work.source_collection_name
        tr
          th =f.label :source_box_folder, t('.source_box_folder')
          td =f.text_field :source_box_folder, value: @work.source_box_folder
        tr
          td(colspan="2")
            =f.check_box :in_scope, value: @work.in_scope
            |&nbsp;
            =f.label :in_scope, t('.in_scope')
        tr
          td(colspan="2")
            =f.label :editorial_notes, t('.editorial_notes'), class: 'above'
            =f.text_area :editorial_notes, rows: 5, value: @work.editorial_notes
        tr
          td(colspan="2")
            =f.label :physical_description, t('.physical_description'), class: 'above'
            =f.text_area :physical_description, rows: 5, value: @work.physical_description
        tr
          td(colspan="2")
            =f.label :document_history, t('.document_history'), class: 'above'
            =f.text_area :document_history, rows: 5, value: @work.document_history
        tr
          td(colspan="2")
            =f.label :permission_description, t('.permission_description'), class: 'above'
            =f.text_area :permission_description, rows: 5, value: @work.permission_description
      .toolbar
        .toolbar_group
          =link_to(work_delete_path(:work_id => @work.id), data: { :confirm => t('.confirm_delete_work') }, class: 'button')
            span= t('.delete_work')
        .toolbar_group.aright =f.button t('.save_changes'), class: 'big'

  aside.sidecol

    .user-label
      =link_to(user_profile_path(@work.owner), class: 'userpic')
        =profile_picture(@work.owner)
      .username
        small= t('.uploaded_by')
        =link_to @work.owner.display_name, user_profile_path(@work.owner)
    p.fglight= t('.settings_only_work_owners')
    p.fglight==t('.more_work_settings_info')

    h4= t('.work_image')
    =form_for(@work, url: update_collection_work_path(@collection.owner, @collection, @work), html: { multipart: true, class: 'image-form' }) do |f|
      =hidden_field_tag(:work_id, @work.id)
      label(data-empty=t('.no_image') data-hover=t('.upload_image') aria-label=t('.upload_image'))
        =f.file_field :picture, accept: 'image/*'
        -if @work.picture_url(:thumb)
          =image_tag(@work.picture_url(:thumb), :alt => t('.work_thumbnail'))
    p.fglight= t('.work_image_description')

    hr
    =form_for(@work, url: update_collection_work_path(@collection.owner, @collection, @work)) do |f|
      =hidden_field_tag(:work_id, @work.id)
      p
        =f.check_box :scribes_can_edit_titles
        |&nbsp;
        =f.label :scribes_can_edit_titles, t('.collaborators_can_edit_titles'), style: "display: inline"
      p
        =f.check_box :restrict_scribes
        |&nbsp;
        =f.label :restrict_scribes, t('.restrict_collaborators')
      -if @work.restrict_scribes && @work.scribes.empty?
        p.warning =t('.restricted_work_no_collaborators_warning')
      small.legend =button_tag t('.apply'), class: 'outline'

    -if @work.restrict_scribes
      .allowed-collaborators
        h3 =t('.allowed_collaborators')
        p =link_to(t('.edit_collaborators'), work_edit_scribes_path(@collection, @work), id: 'edit-scribes-button', class: 'button', data: { litebox: { hash: 'edit-scribes', noscroll: false }})
      =render 'collection/users_list', users: @scribes, type: 'collaborators'


-content_for :javascript
  javascript:
    $(function() {
      $('.user-select-form select').select2({
        placeholder: 'Add new collaborator...',
      });

      $('.image-form :file').on('change', function() {
        $(this).closest('form').submit();
      });

      $('#work_transcription_conventions').keyup(function(){
        $('#revert').prop('disabled', false);
      });

      $('#revert').click(function(e){
        e.preventDefault();
        $.ajax({
          method: 'GET',
          url: '/work/revert',
          data: { work_id: $(this).attr('work_id')}
        }).success(function(data){
          $('#work_transcription_conventions').val(data);
        $('#revert').prop('disabled', true);

        });
      });

      $("#update").on('submit', function(){
        var new_id = $("#work_collection_id").val();
        var collection_id = "#{@work.collection.id}"
        var subjects = "#{@subjects}"
        if (new_id != collection_id){
        //this is a string because it's interpolated from rails
        //if there are subject links, confirm before move
          if (subjects == 'true'){
            var response = confirm("Are you sure you want to move this work to a new collection?  You will lose all subject links.");
            //if cancel, set the collection back to the original
            if (response == false){
              $('#work_collection_id').val(collection_id);
              return;
            }
          };
        };
      });
    });

-content_for :javascript
  javascript:
    $(document).ready(function() {
      const collectionSelect = $('#work_collection_id');
      const documentSetsDiv = $('#document_sets');

      function updateDocumentSetOptions(selectedId) {
        $.ajax({
          url: "#{work_document_sets_select_path}",
          method: 'GET',
          data: { collection_id: selectedId },
          success: function(response) {
            documentSetsDiv.html(response);
            $('#work_document_set_ids').multiSelect();
          },
          error: function(xhr, status, error) {
            console.error('Error fetching document sets:', error);
          }
        });
      }

      collectionSelect.on('change', function() {
        const selectedId = $(this).val();
        updateDocumentSetOptions(selectedId);
      });
    });
