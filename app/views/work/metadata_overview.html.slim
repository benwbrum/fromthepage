=render({ :partial => '/shared/description_tabs', :locals => { :selected => 1, :page_id => @work.slug }})

-editor_class = 'page-editor' + (@auto_fullscreen == 'yes' ? ' fullscreen' : '')


.page-toolbar
  .flex-toolbar
    .flex-toolbar_group
      button#toggleImage.button.outline type="button" =t('.show_image')

.page-columns
  .page-column
    .page-preview(*language_attrs(@collection))
      .work-page_content
        -@work.pages.each do |page|
          -if page.work.pages_are_meaningful
            h4.work-page_title =page.title

          .work-page_text[*language_attrs(@collection)]
            -transcription = xml_to_html(page.xml_text, false)
            -if page.status == Page::STATUS_BLANK
              p.nodata_text ==t('.this_page_is_blank')
            -elsif transcription.present?
              ==transcription.force_encoding('utf-8')
    .page-imagescan
      =render :partial => '/shared/osd_div'


  .page-column
    .page-editarea(style=("display:none" if @preview_xml) *language_attrs(@collection))
      -if @work.description_status == Work::DescriptionStatus::UNDESCRIBED
        p.collection-work_action 
          =t('collection.show.this_work_has_not_been_described')
          span &nbsp;
          =link_to(t('collection.show.help_create_metadata'), describe_collection_work_path(@collection.owner, @collection, @work))

      -else
        ==html_metadata(JSON.parse(@work.metadata_description || '[]'))

h2.legend =t('notes_and_questions')
.page-notes
  =render :partial => "notes/notes"


=render({ :partial => '/shared/collection_footer' })

-unless @current_user_alerted
  -unless current_user.slug.nil?
    -content_for :javascript
      javascript:
        setInterval("transcribe_periodic_timer()", 60000);

        function transcribe_periodic_timer() {
          $.ajax({
            url: "#{collection_transcribe_still_editing_path(current_user.slug, @collection.id, @work.id, 0)}",

            complete: function() {
              $(".page-busy-overlay").hide();
            }
          });
        }

        transcribe_periodic_timer();

-content_for :javascript
  javascript:
    $(function() {
      var fromImage = true;
      updateDisplay(fromImage);


      $('#toggleImage').click(function(){
        fromImage = !fromImage;

        updateDisplay(fromImage)
        Cookies.set('fromImage', fromImage, { expires: 365, path: '/' });
      });

      function updateDisplay(){
        $('.page-imagescan').toggle(fromImage);
        $('.page-preview').toggle(!fromImage);

        var buttonText = (fromImage) ? "Show Transcription" : "Show Image";
        $('#toggleImage').html(buttonText);
      }


      $('[data-fullscreen-toggle]').on('click', function() {
        $(this).toggleClass('pressed');
        $('.page-editor').toggleClass('fullscreen');

        if (typeof hot !== 'undefined') {
          hot.updateSettings({});
        }
      });

      $('[data-layout-set]').on('click', function() {
        var mode = $(this).data('layout-set');
        Cookies.set('transcribe_layout_mode', mode, { expires: 365 });
        $('[data-layout-mode]').attr('data-layout-mode', mode);

        if (typeof viewer !== 'undefined') {
          requestAnimationFrame(() => viewer.raiseEvent('reset-bounds'));
        };

        if (typeof hot !== 'undefined') {
          hot.updateSettings({});
        };
      });

      $('#auto-fullscreen').on('change', function() {
        var checked = this.checked ? 'yes' : 'no';
        Cookies.set('auto_fullscreen', checked, { expires: 365 });
      });

      $('#page_needs_review').click(function(){
        $('#page_mark_blank').prop('checked', false);
      });

      $('#page_mark_blank').click(function(){
        $('#page_needs_review').prop('checked', false);
      });
    });

