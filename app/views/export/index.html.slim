=render({ :partial => '/shared/collection_tabs', :locals => { :selected => 6, :collection_id => @collection }})

h2.nomargin =t('.export_all_works')
p.big
  span.fright(style="margin-left: 30px")
    =link_to(bulk_export_new_path(:collection_id => @collection.slug), class: 'button btnExport', id: 'btnExportAll')
      =svg_symbol '#icon-export', class: 'icon'
      span =t('.export_all_works')

  span =t('.export_all_works_description')


-if ContentdmTranslator.collection_is_cdm?(@collection) && @collection.text_entry? && @collection.is_a?(Collection)
  h2 =t('.export_to_contentdm')
  p.big
    span.fright(style="margin-left: 30px")
      =link_to(export_edit_contentdm_credentials_path(:collection_id => @collection.id), {:class => 'button btnExport', :id => 'btnExportContentdm', :data => { :litebox => { :hash => "", :collection_id => @collection.id }, :collection_id => @collection.id}})
        =svg_symbol '#icon-export', class: 'icon'
        span =t('.export_to_contentdm')
    span =t('.export_to_contentdm_description')

-if @collection.text_entry?
  h2 =t('.export_individual_works')
  p.big =t('.export_individual_works_description')

  =form_tag export_list_path(collection_id: @collection.id), method: :get, enforce_utf8: false, id: 'collection-search', class: 'dataTables_wrapper' do
    =hidden_field_tag :sort, params[:sort]
    =hidden_field_tag :order, params[:order]
    .dataTables_length
      label =select_tag :per_page, options_for_select(pagination_options_collection, params[:per_page] || '15'), class: 'field-input'
    section.collection-search(style='width: 30%; float: right;')
      =search_field_tag :search, params[:search], placeholder: 'Search...'
      =button_tag 'Search', id: 'collection-search-submit'

    = render partial: 'list', locals: { collection: @collection, works: @works, header: @header }

h2= t('.api')
p
  =t('.iiif_api_description', link: link_to(t('.here'), 'https://github.com/benwbrum/fromthepage/wiki/FromThePage-Support-for-the-IIIF-Presentation-API-and-Web-Annotations')).html_safe

p
  =t('.iiif_collection_api_endpoint', link: link_to(iiif_collection_url(@collection.slug, only_path: false),
                                                    iiif_collection_url(@collection.slug, only_path: false))).html_safe

-content_for :javascript
  javascript:
    $(function() {
      // Remove 'page_busy' spinner once CSV download finished
      // Cookie should be set to 'true' in the controller method
      $('.btnExport').on('click', function() {
        Cookies.remove('download_finished', {path: '/'});
        var downloadCheckTimer = window.setInterval(function() {
          var cookie = Cookies.get('download_finished');
          if(cookie === 'true') {
            $('html').removeClass('page-busy');
            window.clearInterval(downloadCheckTimer);
          }
        }, 1000);
      });
    });

    $(document).ready( function () {
      // initialize the works list datatable
      const collectionSearchForm = $('#collection-search');
      const worksListTable = $('#works-list');

      const sortInput = $('#sort');
      const orderInput = $('#order');
      const perPageSelect = $('#per_page');
      const collectionSearchSubmitButton = $('#collection-search-submit');

      initializeTable();

      function initializeTable() {
        $('th.sorting').on('click', triggerSorting);
      }

      function triggerSorting(event) {
        sortInput.val($(event.target).data('sort'));
        let newOrder = orderInput.val() === 'asc' ? 'desc' : 'asc';
        orderInput.val(newOrder);

        submitForm();
      }

      // Handle change per_page
      perPageSelect.on('change', function(event) {
        event.preventDefault();

        submitForm();
      });

      // Handle submit button click
      collectionSearchSubmitButton.on('click', function(event) {
        event.preventDefault();

        submitForm();
      });

      function submitForm(event) {
        $('html').addClass('page-busy');

        const formData = collectionSearchForm.serialize();

        const queryParams = new URLSearchParams(formData).toString();
        const newUrl = `${window.location.pathname}?${queryParams}`;
        history.pushState(null, '', newUrl);

        $.ajax({
          url: collectionSearchForm.attr('action'),
          type: collectionSearchForm.attr('method'),
          data: formData,
          success: function(response) {
            worksListTable.html(response);
            initializeTable();

            $('html').removeClass('page-busy');
          },
          error: function(xhr, status, error) {
            $('html').removeClass('page-busy');
            console.error('Error fetching document sets:', error);
          }
        })
      }
    } );
