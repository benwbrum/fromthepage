=render({ :partial => '/shared/collection_tabs', :locals => { :selected => 6, :collection_id => @collection }})

.columns
  article.maincol
    h2.nomargin= t('.export_all_works')
    =form_with(url: bulk_export_create_path, model: @bulk_export, local: true) do |f|
      =hidden_field_tag :collection_id, @collection.slug
      =validation_summary @bulk_export.errors
      ul.bulk-export
        li
          .bulk-export_format
            h5= t('.html')
            p.nomargin= t('.html_description')
          .bulk-export_options
            =f.label :html_page
              =f.check_box :html_page, value: @bulk_export.html_page
              span= t('.one_file_per_page')
            =f.label :html_work
              =f.check_box :html_work, value: @bulk_export.html_work
              span= t('.one_file_per_work')
        li
          .bulk-export_format
            h5= t('.verbatim_plaintext')
            p.nomargin= t('.verbatim_plaintext_description')
          .bulk-export_options
            =f.label :plaintext_verbatim_page
              =f.check_box :plaintext_verbatim_page, value: @bulk_export.plaintext_verbatim_page
              span= t('.one_file_per_page')
            =f.label :plaintext_verbatim_work
              =f.check_box :plaintext_verbatim_work, value: @bulk_export.plaintext_verbatim_work
              span= t('.one_file_per_work')
        li
          .bulk-export_format
            h5= t('.expanded_plaintext')
            p.nomargin= t('.expanded_plaintext_description')
          .bulk-export_options
            =f.label :plaintext_emended_page
              =f.check_box :plaintext_emended_page, value: @bulk_export.plaintext_emended_page
              span= t('.one_file_per_page')
            =f.label :plaintext_emended_work
              =f.check_box :plaintext_emended_work, value: @bulk_export.plaintext_emended_work
              span= t('.one_file_per_work')
        li
          .bulk-export_format
            h5= t('.search_optimized_plaintext')
            p.nomargin= t('.search_optimized_plaintext_description')
          .bulk-export_options
            =f.label :plaintext_searchable_page
              =f.check_box :plaintext_searchable_page, value: @bulk_export.plaintext_searchable_page
              span= t('.one_file_per_page')
            =f.label :plaintext_searchable_work
              =f.check_box :plaintext_searchable_work, value: @bulk_export.plaintext_searchable_work
              span= t('.one_file_per_work')
        li
          .bulk-export_format
            h5= t('.tei_xml')
            p.nomargin= t('.tei_xml_description')
          .bulk-export_options
            =f.label :tei_work
              =f.check_box :tei_work, value: @bulk_export.tei_work
              span= t('.one_file_per_work')
        li
          .bulk-export_format
            h5= t('.text_pdf')
            p.nomargin= t('.text_pdf_description')
          .bulk-export_options
            =f.label :text_pdf_work
              =f.check_box :text_pdf_work, value: @bulk_export.text_pdf_work
              span= t('.one_file_per_work')
        li
          .bulk-export_format
            h5= t('.text_docx')
            p.nomargin= t('.text_docx_description')
          .bulk-export_options
            =f.label :text_docx_work
              =f.check_box :text_docx_work, value: @bulk_export.text_docx_work
              span= t('.one_file_per_work')
        li
          .bulk-export_format
            h5= t('.facing_edition_pdf')
            p.nomargin= t('.facing_edition_pdf_description')
          .bulk-export_options
            =f.label :facing_edition_work
              =f.check_box :facing_edition_work, value: @bulk_export.facing_edition_work
              span= t('.one_file_per_work')
        li
          .bulk-export_format
            h5= t('.table_field_csv')
            p.nomargin= t('.table_field_csv_description')
          .bulk-export_options
            =f.label :table_csv_work
              =f.check_box :table_csv_work, value: @bulk_export.table_csv_work
              span= t('.one_file_per_work')
            =f.label :table_csv_collection
              =f.check_box :table_csv_collection, value: @bulk_export.table_csv_collection
              span= t('.one_file_per_collection')
        li
          .bulk-export_format
            h5= t('.subject_csv')
            p.nomargin= t('.subject_csv_description')
          .bulk-export_options
            =f.label :subject_csv_collection
              =f.check_box :subject_csv_collection, value: @bulk_export.subject_csv_collection
              span= t('.one_file_per_collection')
        li
          .bulk-export_format
            h5= t('.work_metadata_csv')
            p.nomargin= t('.work_metadata_csv_description')
          .bulk-export_options
            =f.label :work_metadata_csv
              =f.check_box :work_metadata_csv, value: @bulk_export.work_metadata_csv
              span= t('.one_file_per_collection')
        li
          .bulk-export_format
            h5= t('.static_site')
            p.nomargin= t('.static_site_description')
          .bulk-export_options
            =f.label :static
              =f.check_box :static, value: @bulk_export.static
              span= t('.one_site_per_collection')

      .toolbar
        .toolbar_group.aright =f.button t('.start_export'), class: 'big', 'data-start-export': ''

  aside.sidecol
    h4= t('.previous_exports')
    table.admin-grid.datagrid.striped
      thead
        tr
          th= t('.time')
          th= t('.status')

      tbody
        -@collection.bulk_exports.where.not(:status => BulkExport::Status::CLEANED).order(:created_at => :desc).each do |bulk_export|
          tr
            td.nowrap
              =bulk_export.created_at.localtime.strftime("%m/%d/%Y at %I:%M %p")
            td.nowrap
              small.label(class="upload-status-#{bulk_export.status}") =bulk_export.status.titleize
              -if bulk_export.status == BulkExport::Status::FINISHED
                br
                =link_to(t('.download'), bulk_export_download_path(:bulk_export_id => bulk_export.id), class: 'btnExport')

-content_for :javascript
  javascript:
    $(function() {
      // Remove 'page_busy' spinner once download finished
      // Cookie should be set to 'true' in the controller method
      $('.btnExport').on('click', function() {
        Cookies.remove('download_finished', {path: '/'});
        var downloadCheckTimer = window.setInterval(function() {
          var cookie = Cookies.get('download_finished');
          if(cookie === 'true') {
            $('html').removeClass('page-busy');
            window.clearInterval(downloadCheckTimer);
          }
        }, 1000);
      });
    });
