{"version":3,"file":"annotorious-openseadragon-textlayer.js","sources":["../src/labelConfigurations/transcriptionLabel.ts","../../annotorious-formats/dist/annotorious-formats.es.js","../node_modules/svelte/internal/index.mjs","../src/Label/FillBoundsLabel.svelte","../src/Label/FixedPageSizeLabel.svelte","../src/Label/FixedScreenSizeLabel.svelte","../../../annotorious/packages/annotorious/src/model/core/Shape.ts","../../../annotorious/packages/annotorious/src/model/core/shapeUtils.ts","../../../annotorious/packages/annotorious/src/model/core/polygon/polygonUtils.ts","../../../annotorious/packages/annotorious/src/model/core/rectangle/rectangleUtils.ts","../../../annotorious/node_modules/nanoid/index.browser.js","../../../annotorious/packages/annotorious-core/src/presence/PresenceState.ts","../src/ImageDimensions.ts","../src/TextLayer.svelte","../src/textLayerExtension.ts"],"sourcesContent":["import type { ImageAnnotation } from '@annotorious/openseadragon';\n\nexport const transcriptionLabel = (annotation: ImageAnnotation) =>\n  annotation.bodies.find(b => b.purpose === 'transcribing')?.value;","var g = /* @__PURE__ */ ((t) => (t.POLYGON = \"POLYGON\", t.RECTANGLE = \"RECTANGLE\", t))(g || {});\nconst w = (t, e) => e, E = (t) => {\n  let e = 1 / 0, n = 1 / 0, o = -1 / 0, r = -1 / 0;\n  return t.forEach(([i, s]) => {\n    e = Math.min(e, i), n = Math.min(n, s), o = Math.max(o, i), r = Math.max(r, s);\n  }), { minX: e, minY: n, maxX: o, maxY: r };\n}, I = {\n  area: (t) => {\n    const { points: e } = t.geometry;\n    let n = 0, o = e.length - 1;\n    for (let r = 0; r < e.length; r++)\n      n += (e[o][0] + e[r][0]) * (e[o][1] - e[r][1]), o = r;\n    return Math.abs(0.5 * n);\n  },\n  intersects: (t, e, n) => {\n    const { points: o } = t.geometry;\n    let r = !1;\n    for (let i = 0, s = o.length - 1; i < o.length; s = i++) {\n      const a = o[i][0], l = o[i][1], u = o[s][0], p = o[s][1];\n      l > n != p > n && e < (u - a) * (n - l) / (p - l) + a && (r = !r);\n    }\n    return r;\n  }\n};\nw(g.POLYGON, I);\nconst F = {\n  area: (t) => t.geometry.w * t.geometry.h,\n  intersects: (t, e, n) => e >= t.geometry.x && e <= t.geometry.x + t.geometry.w && n >= t.geometry.y && n <= t.geometry.y + t.geometry.h\n};\nw(g.RECTANGLE, F);\nconst S = (t, e = !1) => {\n  const n = typeof t == \"string\" ? t : t.value, o = /^(xywh)=(pixel|percent)?:?(.+?),(.+?),(.+?),(.+)*/g, r = [...n.matchAll(o)][0], [i, s, a, l, u, p, A] = r;\n  if (s !== \"xywh\")\n    throw new Error(\"Unsupported MediaFragment: \" + n);\n  if (a && a !== \"pixel\")\n    throw new Error(`Unsupported MediaFragment unit: ${a}`);\n  const [y, d, b, h] = [l, u, p, A].map(parseFloat);\n  return {\n    type: g.RECTANGLE,\n    geometry: {\n      x: y,\n      y: d,\n      w: b,\n      h,\n      bounds: {\n        minX: y,\n        minY: e ? d - h : d,\n        maxX: y + b,\n        maxY: e ? d : d + h\n      }\n    }\n  };\n}, T = (t) => {\n  const e = typeof t == \"string\" ? t : t.value, [n, o, r] = e.match(/(<polygon points=[\"|'])([^(\"|')]*)/) || [];\n  if (!r)\n    return;\n  const i = r.split(\" \").map((a) => a.split(\",\").map(parseFloat));\n  return {\n    type: g.POLYGON,\n    geometry: {\n      points: i,\n      bounds: E(i)\n    }\n  };\n};\nlet G = (t = 21) => crypto.getRandomValues(new Uint8Array(t)).reduce((e, n) => (n &= 63, n < 36 ? e += n.toString(36) : n < 62 ? e += (n - 26).toString(36).toUpperCase() : n > 62 ? e += \"-\" : e += \"_\", e), \"\");\nG();\nconst L = (t) => {\n  const e = [];\n  for (const n of t.querySelectorAll(\"String\")) {\n    const o = n.getAttribute(\"ID\"), r = n.getAttribute(\"CONTENT\"), i = parseFloat(n.getAttribute(\"HPOS\")), s = parseFloat(n.getAttribute(\"VPOS\")), a = parseFloat(n.getAttribute(\"WIDTH\")), l = parseFloat(n.getAttribute(\"HEIGHT\")), u = i + a, p = s + l;\n    e.push({\n      id: o,\n      bodies: [{\n        id: o,\n        annotation: o,\n        purpose: \"transcribing\",\n        value: r\n      }],\n      target: {\n        annotation: o,\n        selector: {\n          type: g.RECTANGLE,\n          geometry: {\n            bounds: { minX: i, minY: s, maxX: u, maxY: p },\n            x: i,\n            y: s,\n            w: a,\n            h: l\n          }\n        }\n      }\n    });\n  }\n  return e;\n}, D = (t) => {\n  const n = new DOMParser().parseFromString(t, \"application/xml\"), o = n.querySelector(\"Page\"), r = [];\n  for (const l of n.querySelectorAll(\"TextLine\"))\n    r.push(...L(l));\n  const i = o.getAttribute(\"ID\"), s = parseFloat(o.getAttribute(\"HEIGHT\")), a = parseFloat(o.getAttribute(\"WIDTH\"));\n  return { annotations: r, metadata: { id: i, height: s, width: a } };\n};\nlet m;\nconst N = new Uint8Array(16);\nfunction R() {\n  if (!m && (m = typeof crypto < \"u\" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto), !m))\n    throw new Error(\"crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported\");\n  return m(N);\n}\nconst c = [];\nfor (let t = 0; t < 256; ++t)\n  c.push((t + 256).toString(16).slice(1));\nfunction f(t, e = 0) {\n  return c[t[e + 0]] + c[t[e + 1]] + c[t[e + 2]] + c[t[e + 3]] + \"-\" + c[t[e + 4]] + c[t[e + 5]] + \"-\" + c[t[e + 6]] + c[t[e + 7]] + \"-\" + c[t[e + 8]] + c[t[e + 9]] + \"-\" + c[t[e + 10]] + c[t[e + 11]] + c[t[e + 12]] + c[t[e + 13]] + c[t[e + 14]] + c[t[e + 15]];\n}\nconst v = typeof crypto < \"u\" && crypto.randomUUID && crypto.randomUUID.bind(crypto), U = {\n  randomUUID: v\n};\nfunction x(t, e, n) {\n  if (U.randomUUID && !e && !t)\n    return U.randomUUID();\n  t = t || {};\n  const o = t.random || (t.rng || R)();\n  if (o[6] = o[6] & 15 | 64, o[8] = o[8] & 63 | 128, e) {\n    n = n || 0;\n    for (let r = 0; r < 16; ++r)\n      e[n + r] = o[r];\n    return e;\n  }\n  return f(o);\n}\nconst P = (t) => t.reduce(\n  (e, n) => {\n    const { on: o, resource: r } = n;\n    let i;\n    if (o.selector[\"@type\"] === \"oa:FragmentSelector\") {\n      const s = n[\"@id\"];\n      i = {\n        id: s,\n        target: {\n          annotation: s,\n          selector: S(o.selector.value)\n        },\n        bodies: [{\n          id: x(),\n          annotation: s,\n          purpose: \"transcribing\",\n          value: r.chars\n        }]\n      };\n    } else if (o.selector[\"@type\"] === \"oa:SvgSelector\") {\n      const s = T(o.selector.value);\n      if (s) {\n        const a = n[\"@id\"] || x();\n        i = {\n          id: a,\n          target: {\n            annotation: a,\n            selector: {\n              type: s.type,\n              geometry: { ...s.geometry }\n            }\n          },\n          bodies: [{\n            id: x(),\n            annotation: a,\n            purpose: \"transcribing\",\n            value: r.chars\n          }]\n        };\n      }\n    }\n    return i ? {\n      parsed: [...e.parsed, i],\n      failed: e.failed\n    } : {\n      parsed: e.parsed,\n      failed: [...e.failed, n]\n    };\n  },\n  { parsed: [], failed: [] }\n);\nexport {\n  D as parseALTO,\n  P as parseAnnotations\n};\n//# sourceMappingURL=annotorious-formats.es.js.map\n","function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\n// Adapted from https://github.com/then/is-promise/blob/master/index.js\n// Distributed under MIT License https://github.com/then/is-promise/blob/master/LICENSE\nfunction is_promise(value) {\n    return !!value && (typeof value === 'object' || typeof value === 'function') && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nlet src_url_equal_anchor;\nfunction src_url_equal(element_src, url) {\n    if (!src_url_equal_anchor) {\n        src_url_equal_anchor = document.createElement('a');\n    }\n    src_url_equal_anchor.href = url;\n    return element_src === src_url_equal_anchor.href;\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn);\n}\nfunction get_all_dirty_from_scope($$scope) {\n    if ($$scope.ctx.length > 32) {\n        const dirty = [];\n        const length = $$scope.ctx.length / 32;\n        for (let i = 0; i < length; i++) {\n            dirty[i] = -1;\n        }\n        return dirty;\n    }\n    return -1;\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\nfunction split_css_unit(value) {\n    const split = typeof value === 'string' && value.match(/^\\s*(-?[\\d.]+)([^\\s]*)\\s*$/);\n    return split ? [parseFloat(split[1]), split[2] || 'px'] : [value, 'px'];\n}\nconst contenteditable_truthy_values = ['', true, 1, 'true', 'contenteditable'];\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\n/**\n * Resize observer singleton.\n * One listener per element only!\n * https://groups.google.com/a/chromium.org/g/blink-dev/c/z6ienONUb5A/m/F5-VcUZtBAAJ\n */\nclass ResizeObserverSingleton {\n    constructor(options) {\n        this.options = options;\n        this._listeners = 'WeakMap' in globals ? new WeakMap() : undefined;\n    }\n    observe(element, listener) {\n        this._listeners.set(element, listener);\n        this._getObserver().observe(element, this.options);\n        return () => {\n            this._listeners.delete(element);\n            this._observer.unobserve(element); // this line can probably be removed\n        };\n    }\n    _getObserver() {\n        var _a;\n        return (_a = this._observer) !== null && _a !== void 0 ? _a : (this._observer = new ResizeObserver((entries) => {\n            var _a;\n            for (const entry of entries) {\n                ResizeObserverSingleton.entries.set(entry.target, entry);\n                (_a = this._listeners.get(entry.target)) === null || _a === void 0 ? void 0 : _a(entry);\n            }\n        }));\n    }\n}\n// Needs to be written like this to pass the tree-shake-test\nResizeObserverSingleton.entries = 'WeakMap' in globals ? new WeakMap() : undefined;\n\n// Track which nodes are claimed during hydration. Unclaimed nodes can then be removed from the DOM\n// at the end of hydration without touching the remaining nodes.\nlet is_hydrating = false;\nfunction start_hydrating() {\n    is_hydrating = true;\n}\nfunction end_hydrating() {\n    is_hydrating = false;\n}\nfunction upper_bound(low, high, key, value) {\n    // Return first index of value larger than input value in the range [low, high)\n    while (low < high) {\n        const mid = low + ((high - low) >> 1);\n        if (key(mid) <= value) {\n            low = mid + 1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low;\n}\nfunction init_hydrate(target) {\n    if (target.hydrate_init)\n        return;\n    target.hydrate_init = true;\n    // We know that all children have claim_order values since the unclaimed have been detached if target is not <head>\n    let children = target.childNodes;\n    // If target is <head>, there may be children without claim_order\n    if (target.nodeName === 'HEAD') {\n        const myChildren = [];\n        for (let i = 0; i < children.length; i++) {\n            const node = children[i];\n            if (node.claim_order !== undefined) {\n                myChildren.push(node);\n            }\n        }\n        children = myChildren;\n    }\n    /*\n    * Reorder claimed children optimally.\n    * We can reorder claimed children optimally by finding the longest subsequence of\n    * nodes that are already claimed in order and only moving the rest. The longest\n    * subsequence of nodes that are claimed in order can be found by\n    * computing the longest increasing subsequence of .claim_order values.\n    *\n    * This algorithm is optimal in generating the least amount of reorder operations\n    * possible.\n    *\n    * Proof:\n    * We know that, given a set of reordering operations, the nodes that do not move\n    * always form an increasing subsequence, since they do not move among each other\n    * meaning that they must be already ordered among each other. Thus, the maximal\n    * set of nodes that do not move form a longest increasing subsequence.\n    */\n    // Compute longest increasing subsequence\n    // m: subsequence length j => index k of smallest value that ends an increasing subsequence of length j\n    const m = new Int32Array(children.length + 1);\n    // Predecessor indices + 1\n    const p = new Int32Array(children.length);\n    m[0] = -1;\n    let longest = 0;\n    for (let i = 0; i < children.length; i++) {\n        const current = children[i].claim_order;\n        // Find the largest subsequence length such that it ends in a value less than our current value\n        // upper_bound returns first greater value, so we subtract one\n        // with fast path for when we are on the current longest subsequence\n        const seqLen = ((longest > 0 && children[m[longest]].claim_order <= current) ? longest + 1 : upper_bound(1, longest, idx => children[m[idx]].claim_order, current)) - 1;\n        p[i] = m[seqLen] + 1;\n        const newLen = seqLen + 1;\n        // We can guarantee that current is the smallest value. Otherwise, we would have generated a longer sequence.\n        m[newLen] = i;\n        longest = Math.max(newLen, longest);\n    }\n    // The longest increasing subsequence of nodes (initially reversed)\n    const lis = [];\n    // The rest of the nodes, nodes that will be moved\n    const toMove = [];\n    let last = children.length - 1;\n    for (let cur = m[longest] + 1; cur != 0; cur = p[cur - 1]) {\n        lis.push(children[cur - 1]);\n        for (; last >= cur; last--) {\n            toMove.push(children[last]);\n        }\n        last--;\n    }\n    for (; last >= 0; last--) {\n        toMove.push(children[last]);\n    }\n    lis.reverse();\n    // We sort the nodes being moved to guarantee that their insertion order matches the claim order\n    toMove.sort((a, b) => a.claim_order - b.claim_order);\n    // Finally, we move the nodes\n    for (let i = 0, j = 0; i < toMove.length; i++) {\n        while (j < lis.length && toMove[i].claim_order >= lis[j].claim_order) {\n            j++;\n        }\n        const anchor = j < lis.length ? lis[j] : null;\n        target.insertBefore(toMove[i], anchor);\n    }\n}\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction append_styles(target, style_sheet_id, styles) {\n    const append_styles_to = get_root_for_style(target);\n    if (!append_styles_to.getElementById(style_sheet_id)) {\n        const style = element('style');\n        style.id = style_sheet_id;\n        style.textContent = styles;\n        append_stylesheet(append_styles_to, style);\n    }\n}\nfunction get_root_for_style(node) {\n    if (!node)\n        return document;\n    const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;\n    if (root && root.host) {\n        return root;\n    }\n    return node.ownerDocument;\n}\nfunction append_empty_stylesheet(node) {\n    const style_element = element('style');\n    append_stylesheet(get_root_for_style(node), style_element);\n    return style_element.sheet;\n}\nfunction append_stylesheet(node, style) {\n    append(node.head || node, style);\n    return style.sheet;\n}\nfunction append_hydration(target, node) {\n    if (is_hydrating) {\n        init_hydrate(target);\n        if ((target.actual_end_child === undefined) || ((target.actual_end_child !== null) && (target.actual_end_child.parentNode !== target))) {\n            target.actual_end_child = target.firstChild;\n        }\n        // Skip nodes of undefined ordering\n        while ((target.actual_end_child !== null) && (target.actual_end_child.claim_order === undefined)) {\n            target.actual_end_child = target.actual_end_child.nextSibling;\n        }\n        if (node !== target.actual_end_child) {\n            // We only insert if the ordering of this node should be modified or the parent node is not target\n            if (node.claim_order !== undefined || node.parentNode !== target) {\n                target.insertBefore(node, target.actual_end_child);\n            }\n        }\n        else {\n            target.actual_end_child = node.nextSibling;\n        }\n    }\n    else if (node.parentNode !== target || node.nextSibling !== null) {\n        target.appendChild(node);\n    }\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction insert_hydration(target, node, anchor) {\n    if (is_hydrating && !anchor) {\n        append_hydration(target, node);\n    }\n    else if (node.parentNode !== target || node.nextSibling != anchor) {\n        target.insertBefore(node, anchor || null);\n    }\n}\nfunction detach(node) {\n    if (node.parentNode) {\n        node.parentNode.removeChild(node);\n    }\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction comment(content) {\n    return document.createComment(content);\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_immediate_propagation(fn) {\n    return function (event) {\n        event.stopImmediatePropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction trusted(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.isTrusted)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\n/**\n * List of attributes that should always be set through the attr method,\n * because updating them through the property setter doesn't work reliably.\n * In the example of `width`/`height`, the problem is that the setter only\n * accepts numeric values, but the attribute can also be set to a string like `50%`.\n * If this list becomes too big, rethink this approach.\n */\nconst always_set_through_set_attribute = ['width', 'height'];\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set && always_set_through_set_attribute.indexOf(key) === -1) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data_map(node, data_map) {\n    Object.keys(data_map).forEach((key) => {\n        set_custom_element_data(node, key, data_map[key]);\n    });\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction set_dynamic_element_data(tag) {\n    return (/-/.test(tag)) ? set_custom_element_data_map : set_attributes;\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction init_binding_group(group) {\n    let _inputs;\n    return {\n        /* push */ p(...inputs) {\n            _inputs = inputs;\n            _inputs.forEach(input => group.push(input));\n        },\n        /* remove */ r() {\n            _inputs.forEach(input => group.splice(group.indexOf(input), 1));\n        }\n    };\n}\nfunction init_binding_group_dynamic(group, indexes) {\n    let _group = get_binding_group(group);\n    let _inputs;\n    function get_binding_group(group) {\n        for (let i = 0; i < indexes.length; i++) {\n            group = group[indexes[i]] = group[indexes[i]] || [];\n        }\n        return group;\n    }\n    function push() {\n        _inputs.forEach(input => _group.push(input));\n    }\n    function remove() {\n        _inputs.forEach(input => _group.splice(_group.indexOf(input), 1));\n    }\n    return {\n        /* update */ u(new_indexes) {\n            indexes = new_indexes;\n            const new_group = get_binding_group(group);\n            if (new_group !== _group) {\n                remove();\n                _group = new_group;\n                push();\n            }\n        },\n        /* push */ p(...inputs) {\n            _inputs = inputs;\n            push();\n        },\n        /* remove */ r: remove\n    };\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction init_claim_info(nodes) {\n    if (nodes.claim_info === undefined) {\n        nodes.claim_info = { last_index: 0, total_claimed: 0 };\n    }\n}\nfunction claim_node(nodes, predicate, processNode, createNode, dontUpdateLastIndex = false) {\n    // Try to find nodes in an order such that we lengthen the longest increasing subsequence\n    init_claim_info(nodes);\n    const resultNode = (() => {\n        // We first try to find an element after the previous one\n        for (let i = nodes.claim_info.last_index; i < nodes.length; i++) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                return node;\n            }\n        }\n        // Otherwise, we try to find one before\n        // We iterate in reverse so that we don't go too far back\n        for (let i = nodes.claim_info.last_index - 1; i >= 0; i--) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                else if (replacement === undefined) {\n                    // Since we spliced before the last_index, we decrease it\n                    nodes.claim_info.last_index--;\n                }\n                return node;\n            }\n        }\n        // If we can't find any matching node, we create a new one\n        return createNode();\n    })();\n    resultNode.claim_order = nodes.claim_info.total_claimed;\n    nodes.claim_info.total_claimed += 1;\n    return resultNode;\n}\nfunction claim_element_base(nodes, name, attributes, create_element) {\n    return claim_node(nodes, (node) => node.nodeName === name, (node) => {\n        const remove = [];\n        for (let j = 0; j < node.attributes.length; j++) {\n            const attribute = node.attributes[j];\n            if (!attributes[attribute.name]) {\n                remove.push(attribute.name);\n            }\n        }\n        remove.forEach(v => node.removeAttribute(v));\n        return undefined;\n    }, () => create_element(name));\n}\nfunction claim_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, element);\n}\nfunction claim_svg_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, svg_element);\n}\nfunction claim_text(nodes, data) {\n    return claim_node(nodes, (node) => node.nodeType === 3, (node) => {\n        const dataStr = '' + data;\n        if (node.data.startsWith(dataStr)) {\n            if (node.data.length !== dataStr.length) {\n                return node.splitText(dataStr.length);\n            }\n        }\n        else {\n            node.data = dataStr;\n        }\n    }, () => text(data), true // Text nodes should not update last index since it is likely not worth it to eliminate an increasing subsequence of actual elements\n    );\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction claim_comment(nodes, data) {\n    return claim_node(nodes, (node) => node.nodeType === 8, (node) => {\n        node.data = '' + data;\n        return undefined;\n    }, () => comment(data), true);\n}\nfunction find_comment(nodes, text, start) {\n    for (let i = start; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 8 /* comment node */ && node.textContent.trim() === text) {\n            return i;\n        }\n    }\n    return nodes.length;\n}\nfunction claim_html_tag(nodes, is_svg) {\n    // find html opening tag\n    const start_index = find_comment(nodes, 'HTML_TAG_START', 0);\n    const end_index = find_comment(nodes, 'HTML_TAG_END', start_index);\n    if (start_index === end_index) {\n        return new HtmlTagHydration(undefined, is_svg);\n    }\n    init_claim_info(nodes);\n    const html_tag_nodes = nodes.splice(start_index, end_index - start_index + 1);\n    detach(html_tag_nodes[0]);\n    detach(html_tag_nodes[html_tag_nodes.length - 1]);\n    const claimed_nodes = html_tag_nodes.slice(1, html_tag_nodes.length - 1);\n    for (const n of claimed_nodes) {\n        n.claim_order = nodes.claim_info.total_claimed;\n        nodes.claim_info.total_claimed += 1;\n    }\n    return new HtmlTagHydration(claimed_nodes, is_svg);\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.data === data)\n        return;\n    text.data = data;\n}\nfunction set_data_contenteditable(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    text.data = data;\n}\nfunction set_data_maybe_contenteditable(text, data, attr_value) {\n    if (~contenteditable_truthy_values.indexOf(attr_value)) {\n        set_data_contenteditable(text, data);\n    }\n    else {\n        set_data(text, data);\n    }\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    if (value == null) {\n        node.style.removeProperty(key);\n    }\n    else {\n        node.style.setProperty(key, value, important ? 'important' : '');\n    }\n}\nfunction select_option(select, value, mounting) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n    if (!mounting || value !== undefined) {\n        select.selectedIndex = -1; // no option should be selected\n    }\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked');\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_iframe_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n        'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n            // make sure an initial resize event is fired _after_ the iframe is loaded (which is asynchronous)\n            // see https://github.com/sveltejs/svelte/issues/4233\n            fn();\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nconst resize_observer_content_box = /* @__PURE__ */ new ResizeObserverSingleton({ box: 'content-box' });\nconst resize_observer_border_box = /* @__PURE__ */ new ResizeObserverSingleton({ box: 'border-box' });\nconst resize_observer_device_pixel_content_box = /* @__PURE__ */ new ResizeObserverSingleton({ box: 'device-pixel-content-box' });\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail, { bubbles = false, cancelable = false } = {}) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, bubbles, cancelable, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nfunction head_selector(nodeId, head) {\n    const result = [];\n    let started = 0;\n    for (const node of head.childNodes) {\n        if (node.nodeType === 8 /* comment node */) {\n            const comment = node.textContent.trim();\n            if (comment === `HEAD_${nodeId}_END`) {\n                started -= 1;\n                result.push(node);\n            }\n            else if (comment === `HEAD_${nodeId}_START`) {\n                started += 1;\n                result.push(node);\n            }\n        }\n        else if (started > 0) {\n            result.push(node);\n        }\n    }\n    return result;\n}\nclass HtmlTag {\n    constructor(is_svg = false) {\n        this.is_svg = false;\n        this.is_svg = is_svg;\n        this.e = this.n = null;\n    }\n    c(html) {\n        this.h(html);\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            if (this.is_svg)\n                this.e = svg_element(target.nodeName);\n            /** #7364  target for <template> may be provided as #document-fragment(11) */\n            else\n                this.e = element((target.nodeType === 11 ? 'TEMPLATE' : target.nodeName));\n            this.t = target.tagName !== 'TEMPLATE' ? target : target.content;\n            this.c(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.nodeName === 'TEMPLATE' ? this.e.content.childNodes : this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\nclass HtmlTagHydration extends HtmlTag {\n    constructor(claimed_nodes, is_svg = false) {\n        super(is_svg);\n        this.e = this.n = null;\n        this.l = claimed_nodes;\n    }\n    c(html) {\n        if (this.l) {\n            this.n = this.l;\n        }\n        else {\n            super.c(html);\n        }\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert_hydration(this.t, this.n[i], anchor);\n        }\n    }\n}\nfunction attribute_to_object(attributes) {\n    const result = {};\n    for (const attribute of attributes) {\n        result[attribute.name] = attribute.value;\n    }\n    return result;\n}\nfunction get_custom_elements_slots(element) {\n    const result = {};\n    element.childNodes.forEach((node) => {\n        result[node.slot || 'default'] = true;\n    });\n    return result;\n}\nfunction construct_svelte_component(component, props) {\n    return new component(props);\n}\n\n// we need to store the information for multiple documents because a Svelte application could also contain iframes\n// https://github.com/sveltejs/svelte/issues/3624\nconst managed_styles = new Map();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_style_information(doc, node) {\n    const info = { stylesheet: append_empty_stylesheet(node), rules: {} };\n    managed_styles.set(doc, info);\n    return info;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = get_root_for_style(node);\n    const { stylesheet, rules } = managed_styles.get(doc) || create_style_information(doc, node);\n    if (!rules[name]) {\n        rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        managed_styles.forEach(info => {\n            const { ownerNode } = info.stylesheet;\n            // there is no ownerNode if it runs on jsdom.\n            if (ownerNode)\n                detach(ownerNode);\n        });\n        managed_styles.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error('Function called outside component initialization');\n    return current_component;\n}\n/**\n * Schedules a callback to run immediately before the component is updated after any state change.\n *\n * The first time the callback runs will be before the initial `onMount`\n *\n * https://svelte.dev/docs#run-time-svelte-beforeupdate\n */\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\n/**\n * The `onMount` function schedules a callback to run as soon as the component has been mounted to the DOM.\n * It must be called during the component's initialisation (but doesn't need to live *inside* the component;\n * it can be called from an external module).\n *\n * `onMount` does not run inside a [server-side component](/docs#run-time-server-side-component-api).\n *\n * https://svelte.dev/docs#run-time-svelte-onmount\n */\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\n/**\n * Schedules a callback to run immediately after the component has been updated.\n *\n * The first time the callback runs will be after the initial `onMount`\n */\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\n/**\n * Schedules a callback to run immediately before the component is unmounted.\n *\n * Out of `onMount`, `beforeUpdate`, `afterUpdate` and `onDestroy`, this is the\n * only one that runs inside a server-side component.\n *\n * https://svelte.dev/docs#run-time-svelte-ondestroy\n */\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\n/**\n * Creates an event dispatcher that can be used to dispatch [component events](/docs#template-syntax-component-directives-on-eventname).\n * Event dispatchers are functions that can take two arguments: `name` and `detail`.\n *\n * Component events created with `createEventDispatcher` create a\n * [CustomEvent](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent).\n * These events do not [bubble](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#Event_bubbling_and_capture).\n * The `detail` argument corresponds to the [CustomEvent.detail](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/detail)\n * property and can contain any type of data.\n *\n * https://svelte.dev/docs#run-time-svelte-createeventdispatcher\n */\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail, { cancelable = false } = {}) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail, { cancelable });\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n            return !event.defaultPrevented;\n        }\n        return true;\n    };\n}\n/**\n * Associates an arbitrary `context` object with the current component and the specified `key`\n * and returns that object. The context is then available to children of the component\n * (including slotted content) with `getContext`.\n *\n * Like lifecycle functions, this must be called during component initialisation.\n *\n * https://svelte.dev/docs#run-time-svelte-setcontext\n */\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n    return context;\n}\n/**\n * Retrieves the context that belongs to the closest parent component with the specified `key`.\n * Must be called during component initialisation.\n *\n * https://svelte.dev/docs#run-time-svelte-getcontext\n */\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\n/**\n * Retrieves the whole context map that belongs to the closest parent component.\n * Must be called during component initialisation. Useful, for example, if you\n * programmatically create a component and want to pass the existing context to it.\n *\n * https://svelte.dev/docs#run-time-svelte-getallcontexts\n */\nfunction getAllContexts() {\n    return get_current_component().$$.context;\n}\n/**\n * Checks whether a given `key` has been set in the context of a parent component.\n * Must be called during component initialisation.\n *\n * https://svelte.dev/docs#run-time-svelte-hascontext\n */\nfunction hasContext(key) {\n    return get_current_component().$$.context.has(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        // @ts-ignore\n        callbacks.slice().forEach(fn => fn.call(this, event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nlet render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = /* @__PURE__ */ Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\n// flush() calls callbacks in this order:\n// 1. All beforeUpdate callbacks, in order: parents before children\n// 2. All bind:this callbacks, in reverse order: children before parents.\n// 3. All afterUpdate callbacks, in order: parents before children. EXCEPT\n//    for afterUpdates called during the initial onMount, which are called in\n//    reverse order: children before parents.\n// Since callbacks might update component values, which could trigger another\n// call to flush(), the following steps guard against this:\n// 1. During beforeUpdate, any updated components will be added to the\n//    dirty_components array and will cause a reentrant call to flush(). Because\n//    the flush index is kept outside the function, the reentrant call will pick\n//    up where the earlier call left off and go through all dirty components. The\n//    current_component value is saved and restored so that the reentrant call will\n//    not interfere with the \"parent\" flush() call.\n// 2. bind:this callbacks cannot trigger new flush() calls.\n// 3. During afterUpdate, any updated components will NOT have their afterUpdate\n//    callback called a second time; the seen_callbacks set, outside the flush()\n//    function, guarantees this behavior.\nconst seen_callbacks = new Set();\nlet flushidx = 0; // Do *not* move this inside the flush() function\nfunction flush() {\n    // Do not reenter flush while dirty components are updated, as this can\n    // result in an infinite loop. Instead, let the inner flush handle it.\n    // Reentrancy is ok afterwards for bindings etc.\n    if (flushidx !== 0) {\n        return;\n    }\n    const saved_component = current_component;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        try {\n            while (flushidx < dirty_components.length) {\n                const component = dirty_components[flushidx];\n                flushidx++;\n                set_current_component(component);\n                update(component.$$);\n            }\n        }\n        catch (e) {\n            // reset dirty state to not end up in a deadlocked state and then rethrow\n            dirty_components.length = 0;\n            flushidx = 0;\n            throw e;\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        flushidx = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    seen_callbacks.clear();\n    set_current_component(saved_component);\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n/**\n * Useful for example to execute remaining `afterUpdate` callbacks before executing `destroy`.\n */\nfunction flush_render_callbacks(fns) {\n    const filtered = [];\n    const targets = [];\n    render_callbacks.forEach((c) => fns.indexOf(c) === -1 ? filtered.push(c) : targets.push(c));\n    targets.forEach((c) => c());\n    render_callbacks = filtered;\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n    else if (callback) {\n        callback();\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    const options = { direction: 'in' };\n    let config = fn(node, params, options);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            started = true;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config(options);\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    const options = { direction: 'out' };\n    let config = fn(node, params, options);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config(options);\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    const options = { direction: 'both' };\n    let config = fn(node, params, options);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = (program.b - t);\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config(options);\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            if (info.blocks[i] === block) {\n                                info.blocks[i] = null;\n                            }\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\nfunction update_await_block_branch(info, ctx, dirty) {\n    const child_ctx = ctx.slice();\n    const { resolved } = info;\n    if (info.current === info.then) {\n        child_ctx[info.value] = resolved;\n    }\n    if (info.current === info.catch) {\n        child_ctx[info.error] = resolved;\n    }\n    info.block.p(child_ctx, dirty);\n}\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    const updates = [];\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            // defer updates until all the DOM shuffling is done\n            updates.push(() => block.p(child_ctx, dirty));\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    run_all(updates);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error('Cannot have duplicate keys in a keyed each');\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\nconst _boolean_attributes = [\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'inert',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n];\n/**\n * List of HTML boolean attributes (e.g. `<input disabled>`).\n * Source: https://html.spec.whatwg.org/multipage/indices.html\n */\nconst boolean_attributes = new Set([..._boolean_attributes]);\n\n/** regex of all html void element names */\nconst void_element_names = /^(?:area|base|br|col|command|embed|hr|img|input|keygen|link|meta|param|source|track|wbr)$/;\nfunction is_void(name) {\n    return void_element_names.test(name) || name.toLowerCase() === '!doctype';\n}\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, attrs_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (attrs_to_add) {\n        const classes_to_add = attrs_to_add.classes;\n        const styles_to_add = attrs_to_add.styles;\n        if (classes_to_add) {\n            if (attributes.class == null) {\n                attributes.class = classes_to_add;\n            }\n            else {\n                attributes.class += ' ' + classes_to_add;\n            }\n        }\n        if (styles_to_add) {\n            if (attributes.style == null) {\n                attributes.style = style_object_to_string(styles_to_add);\n            }\n            else {\n                attributes.style = style_object_to_string(merge_ssr_styles(attributes.style, styles_to_add));\n            }\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += ' ' + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += ' ' + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${value}\"`;\n        }\n    });\n    return str;\n}\nfunction merge_ssr_styles(style_attribute, style_directive) {\n    const style_object = {};\n    for (const individual_style of style_attribute.split(';')) {\n        const colon_index = individual_style.indexOf(':');\n        const name = individual_style.slice(0, colon_index).trim();\n        const value = individual_style.slice(colon_index + 1).trim();\n        if (!name)\n            continue;\n        style_object[name] = value;\n    }\n    for (const name in style_directive) {\n        const value = style_directive[name];\n        if (value) {\n            style_object[name] = value;\n        }\n        else {\n            delete style_object[name];\n        }\n    }\n    return style_object;\n}\nconst ATTR_REGEX = /[&\"]/g;\nconst CONTENT_REGEX = /[&<]/g;\n/**\n * Note: this method is performance sensitive and has been optimized\n * https://github.com/sveltejs/svelte/pull/5701\n */\nfunction escape(value, is_attr = false) {\n    const str = String(value);\n    const pattern = is_attr ? ATTR_REGEX : CONTENT_REGEX;\n    pattern.lastIndex = 0;\n    let escaped = '';\n    let last = 0;\n    while (pattern.test(str)) {\n        const i = pattern.lastIndex - 1;\n        const ch = str[i];\n        escaped += str.substring(last, i) + (ch === '&' ? '&amp;' : (ch === '\"' ? '&quot;' : '&lt;'));\n        last = i + 1;\n    }\n    return escaped + str.substring(last);\n}\nfunction escape_attribute_value(value) {\n    // keep booleans, null, and undefined for the sake of `spread`\n    const should_escape = typeof value === 'string' || (value && typeof value === 'object');\n    return should_escape ? escape(value, true) : value;\n}\nfunction escape_object(obj) {\n    const result = {};\n    for (const key in obj) {\n        result[key] = escape_attribute_value(obj[key]);\n    }\n    return result;\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules. Otherwise you may need to fix a <${name}>.`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots, context) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(context || (parent_component ? parent_component.$$.context : [])),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, { $$slots = {}, context = new Map() } = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, $$slots, context);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    const assignment = (boolean && value === true) ? '' : `=\"${escape(value, true)}\"`;\n    return ` ${name}${assignment}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : '';\n}\nfunction style_object_to_string(style_object) {\n    return Object.keys(style_object)\n        .filter(key => style_object[key])\n        .map(key => `${key}: ${escape_attribute_value(style_object[key])};`)\n        .join(' ');\n}\nfunction add_styles(style_object) {\n    const styles = style_object_to_string(style_object);\n    return styles ? ` style=\"${styles}\"` : '';\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor, customElement) {\n    const { fragment, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    if (!customElement) {\n        // onMount happens before the initial afterUpdate\n        add_render_callback(() => {\n            const new_on_destroy = component.$$.on_mount.map(run).filter(is_function);\n            // if the component was destroyed immediately\n            // it will update the `$$.on_destroy` reference to `null`.\n            // the destructured on_destroy may still reference to the old array\n            if (component.$$.on_destroy) {\n                component.$$.on_destroy.push(...new_on_destroy);\n            }\n            else {\n                // Edge case - component was destroyed immediately,\n                // most likely as a result of a binding initialising\n                run_all(new_on_destroy);\n            }\n            component.$$.on_mount = [];\n        });\n    }\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        flush_render_callbacks($$.after_update);\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: [],\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        on_disconnect: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false,\n        root: options.target || parent_component.$$.root\n    };\n    append_styles && append_styles($$.root);\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, options.props || {}, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            start_hydrating();\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor, options.customElement);\n        end_hydrating();\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            const { on_mount } = this.$$;\n            this.$$.on_disconnect = on_mount.map(run).filter(is_function);\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        disconnectedCallback() {\n            run_all(this.$$.on_disconnect);\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            if (!is_function(callback)) {\n                return noop;\n            }\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\n/**\n * Base class for Svelte components. Used when dev=false.\n */\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        if (!is_function(callback)) {\n            return noop;\n        }\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.59.2' }, detail), { bubbles: true }));\n}\nfunction append_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append(target, node);\n}\nfunction append_hydration_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append_hydration(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction insert_hydration_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert_hydration(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev('SvelteDOMRemove', { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation, has_stop_immediate_propagation) {\n    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    if (has_stop_immediate_propagation)\n        modifiers.push('stopImmediatePropagation');\n    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });\n    else\n        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev('SvelteDOMSetProperty', { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev('SvelteDOMSetDataset', { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.data === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction set_data_contenteditable_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction set_data_maybe_contenteditable_dev(text, data, attr_value) {\n    if (~contenteditable_truthy_values.indexOf(attr_value)) {\n        set_data_contenteditable_dev(text, data);\n    }\n    else {\n        set_data_dev(text, data);\n    }\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\nfunction validate_dynamic_element(tag) {\n    const is_string = typeof tag === 'string';\n    if (tag && !is_string) {\n        throw new Error('<svelte:element> expects \"this\" attribute to be a string.');\n    }\n}\nfunction validate_void_dynamic_element(tag) {\n    if (tag && is_void(tag)) {\n        console.warn(`<svelte:element this=\"${tag}\"> is self-closing and cannot have content.`);\n    }\n}\nfunction construct_svelte_component_dev(component, props) {\n    const error_message = 'this={...} of <svelte:component> should specify a Svelte component.';\n    try {\n        const instance = new component(props);\n        if (!instance.$$ || !instance.$set || !instance.$on || !instance.$destroy) {\n            throw new Error(error_message);\n        }\n        return instance;\n    }\n    catch (err) {\n        const { message } = err;\n        if (typeof message === 'string' && message.indexOf('is not a constructor') !== -1) {\n            throw new Error(error_message);\n        }\n        else {\n            throw err;\n        }\n    }\n}\n/**\n * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.\n */\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(\"'target' is a required option\");\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn('Component was already destroyed'); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\n/**\n * Base class to create strongly typed Svelte components.\n * This only exists for typing purposes and should be used in `.d.ts` files.\n *\n * ### Example:\n *\n * You have component library on npm called `component-library`, from which\n * you export a component called `MyComponent`. For Svelte+TypeScript users,\n * you want to provide typings. Therefore you create a `index.d.ts`:\n * ```ts\n * import { SvelteComponentTyped } from \"svelte\";\n * export class MyComponent extends SvelteComponentTyped<{foo: string}> {}\n * ```\n * Typing this makes it possible for IDEs like VS Code with the Svelte extension\n * to provide intellisense and to use the component like this in a Svelte file\n * with TypeScript:\n * ```svelte\n * <script lang=\"ts\">\n * \timport { MyComponent } from \"component-library\";\n * </script>\n * <MyComponent foo={'bar'} />\n * ```\n *\n * #### Why not make this part of `SvelteComponent(Dev)`?\n * Because\n * ```ts\n * class ASubclassOfSvelteComponent extends SvelteComponent<{foo: string}> {}\n * const component: typeof SvelteComponent = ASubclassOfSvelteComponent;\n * ```\n * will throw a type error, so we need to separate the more strictly typed class.\n */\nclass SvelteComponentTyped extends SvelteComponentDev {\n    constructor(options) {\n        super(options);\n    }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error('Infinite loop detected');\n        }\n    };\n}\n\nexport { HtmlTag, HtmlTagHydration, ResizeObserverSingleton, SvelteComponent, SvelteComponentDev, SvelteComponentTyped, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_iframe_resize_listener, add_location, add_render_callback, add_styles, add_transform, afterUpdate, append, append_dev, append_empty_stylesheet, append_hydration, append_hydration_dev, append_styles, assign, attr, attr_dev, attribute_to_object, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_comment, claim_component, claim_element, claim_html_tag, claim_space, claim_svg_element, claim_text, clear_loops, comment, component_subscribe, compute_rest_props, compute_slots, construct_svelte_component, construct_svelte_component_dev, contenteditable_truthy_values, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, end_hydrating, escape, escape_attribute_value, escape_object, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, flush_render_callbacks, getAllContexts, getContext, get_all_dirty_from_scope, get_binding_group_value, get_current_component, get_custom_elements_slots, get_root_for_style, get_slot_changes, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, hasContext, has_prop, head_selector, identity, init, init_binding_group, init_binding_group_dynamic, insert, insert_dev, insert_hydration, insert_hydration_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, is_void, listen, listen_dev, loop, loop_guard, merge_ssr_styles, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, resize_observer_border_box, resize_observer_content_box, resize_observer_device_pixel_content_box, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_custom_element_data_map, set_data, set_data_contenteditable, set_data_contenteditable_dev, set_data_dev, set_data_maybe_contenteditable, set_data_maybe_contenteditable_dev, set_dynamic_element_data, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, split_css_unit, spread, src_url_equal, start_hydrating, stop_immediate_propagation, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, trusted, update_await_block_branch, update_keyed_each, update_slot, update_slot_base, validate_component, validate_dynamic_element, validate_each_argument, validate_each_keys, validate_slots, validate_store, validate_void_dynamic_element, xlink_attr };\n","<script type=\"ts\">\n  import type { ImageAnnotation } from '@annotorious/openseadragon';\n  import type { TextLayerOpts } from '../Types';\n\n  let ref: HTMLSpanElement;\n\n  /** props **/\n  export let annotation: ImageAnnotation;\n  export let opts: TextLayerOpts;\n\n  $: b = annotation.target.selector.geometry.bounds;\n\n  $: left = b.minX;\n  $: top = b.minY;\n  $: width = b.maxX - b.minX;\n  $: height = b.maxY - b.minY;\n\n  $: scaleX = ref ? width / ref.offsetWidth : 1;\n  $: scaleY = ref ? height / ref.offsetHeight : 1;\n</script>\n\n<div \n  class=\"annotation\"\n  style={`left:${left}px; top:${top}px; width: ${width}px; height: ${height}px; transform: scale(${scaleX}, ${scaleY})`}>\n  <span bind:this={ref}>\n    {opts.label(annotation)}\n  </span>&nbsp;<!-- ensures spaces between words on copy and paste! -->\n</div>","<script lang=\"ts\">\n  import type { ImageAnnotation } from '@annotorious/openseadragon';\n  import type { TextLayerOpts } from '../Types';\n\n  let ref: HTMLSpanElement;\n\n  /** props **/\n  export let annotation: ImageAnnotation;\n  export let opts: TextLayerOpts;\n\n  $: b = annotation.target.selector.geometry.bounds;\n\n  $: size =  ref ? [ref.offsetWidth, ref.offsetHeight] : [0, 0];\n\n  const getStyle = (size: number[]) => {\n    const offsetX = (opts.offsetX || 0);\n    const offsetY = (opts.offsetY || 0);\n\n    if (opts.position === 'center') {\n      const w = b.maxX - b.minX;\n      const cx = b.minX + w / 2 - size[0] / 2;\n\n      const h = b.maxY - b.minY;\n      const cy = b.minY + h / 2 - size[1] / 2;\n\n      return `left:${cx + offsetX}px; top:${cy + offsetY}px;`;\n    } else if (opts.position === 'topleft') {\n      return `left:${b.minX + offsetX}px; top:${b.minY + offsetY}px;`;\n    } else {\n      return `left:${b.minX + offsetX}px; top:${b.maxY + offsetY}px;`;\n    }\n  }\n</script>\n\n<div \n  class=\"annotation\"\n  style={getStyle(size)}>\n  <span bind:this={ref}>\n    {opts.label(annotation)}\n  </span>&nbsp;<!-- ensures spaces between words on copy and paste! -->\n</div>","<script lang=\"ts\">\n  import type { ImageAnnotation } from '@annotorious/openseadragon';\n  import type { TextLayerOpts } from '../Types';\n\n  /** props **/\n  export let annotation: ImageAnnotation;\n  export let opts: TextLayerOpts;\n  export let scale: number;\n  export let imageSize: [number, number];\n\n  $: b = annotation.target.selector.geometry.bounds;\n\n  $: x = b.minX;\n  $: y = opts.position === 'topleft' ? b.minY : b.maxY;\n\n  const getStyle = (x: number, y: number, scale: number) => {\n    const offsetX = (opts.offsetX || 0) / scale;\n    const offsetY = (opts.offsetY || 0) / scale;\n\n    if (opts.position === 'topleft') {\n      const bottom = imageSize[1] - y;\n      return `left:${x + offsetX}px; bottom:${bottom}px; transform: scale(${1 / scale})`;\n    } else {\n      return `left:${x + offsetX}px; top:${y + offsetY}px; transform: scale(${1 / scale})`;\n    }\n  }\n</script>\n\n<div \n  class=\"annotation\"\n  style={getStyle(x, y, scale)}>\n  <span>\n    {opts.label(annotation)}\n  </span>&nbsp;<!-- ensures spaces between words on copy and paste! -->\n</div>","import type { AbstractSelector } from '@annotorious/core';\n\nexport interface Shape extends AbstractSelector {\n\n  type: ShapeType;\n\n  geometry: Geometry;\n\n}\n\nexport enum ShapeType {\n\n  POLYGON = 'POLYGON',\n\n  RECTANGLE = 'RECTANGLE'\n\n}\n\nexport interface Geometry {\n\n  bounds: Bounds;\n\n}\n\nexport interface Bounds {\n\n  minX: number;\n\n  minY: number;\n\n  maxX: number;\n\n  maxY: number;\n\n}","import type { Bounds, Shape, ShapeType } from './Shape';\n\nexport interface ShapeUtil<T extends Shape> {\n\n  area: (shape: T) => number;\n\n  intersects: (shape: T, x: number, y: number) => boolean;\n\n}\n\nconst Utils: { [key: string]: ShapeUtil<any> } = {};\n\n/**\n * Registers a new ShapeUtil for a given shape type.\n * @param type the shape type\n * @param util the ShapeUtil implementation for this shape type\n */\nexport const registerShapeUtil = (type: ShapeType | string, util: ShapeUtil<any>) =>\n  (Utils[type] = util);\n\n/**\n * Computes the area of the given shape. Delegates to the corresponding ShapeUtil.\n * @param shape the shape\n */\nexport const computeArea = (shape: Shape) => Utils[shape.type].area(shape);\n\n/**\n * Tests if the given shape intersects the given point. Delegates to\n * the corresponding ShapeUtil.\n * @param shape the shape\n * @param x point x coord\n * @param y point y coord\n * @returns true if shape and point intersect\n */\nexport const intersects = (shape: Shape, x: number, y: number): boolean =>\n  Utils[shape.type].intersects(shape, x, y);\n\n/**\n * Computes Bounds from a given list of points.\n * @param points the points\n * @returns the Bounds\n */\nexport const boundsFromPoints = (points: Array<[number, number]>): Bounds => {\n  let minX = Infinity;\n  let minY = Infinity;\n  let maxX = -Infinity;\n  let maxY = -Infinity;\n\n  points.forEach(([x, y]) => {\n    minX = Math.min(minX, x);\n    minY = Math.min(minY, y);\n    maxX = Math.max(maxX, x);\n    maxY = Math.max(maxY, y);\n  });\n\n  return { minX, minY, maxX, maxY };\n};","import { ShapeType } from '../Shape';\nimport { registerShapeUtil, type ShapeUtil } from '../shapeUtils';\nimport type { Polygon } from './Polygon';\n\nconst PolygonUtil: ShapeUtil<Polygon> = {\n  area: (polygon: Polygon): number => {\n    const { points } = polygon.geometry;\n\n    let area = 0;\n    let j = points.length - 1;\n\n    for (let i = 0; i < points.length; i++) {\n      area += (points[j][0] + points[i][0]) * (points[j][1] - points[i][1]);\n      j = i;\n    }\n\n    return Math.abs(0.5 * area);\n  },\n\n  intersects: (polygon: Polygon, x: number, y: number): boolean => {\n    // Based on https://wrf.ecse.rpi.edu/Research/Short_Notes/pnpoly.html/pnpoly.html\n    const { points } = polygon.geometry;\n\n    let inside = false;\n\n    for (let i = 0, j = points.length - 1; i < points.length; j = i++) {\n      const xi = points[i][0],\n        yi = points[i][1];\n      const xj = points[j][0],\n        yj = points[j][1];\n\n      const intersect = yi > y != yj > y && x < ((xj - xi) * (y - yi)) / (yj - yi) + xi;\n\n      if (intersect) inside = !inside;\n    }\n\n    return inside;\n  }\n};\n\nregisterShapeUtil(ShapeType.POLYGON, PolygonUtil);","import { ShapeType } from '../Shape';\nimport type { Rectangle } from './Rectangle';\nimport { registerShapeUtil, type ShapeUtil } from '../shapeUtils';\n\nexport const RectangleUtil: ShapeUtil<Rectangle> = {\n  area: (rect: Rectangle): number => rect.geometry.w * rect.geometry.h,\n\n  intersects: (rect: Rectangle, x: number, y: number): boolean =>\n    x >= rect.geometry.x &&\n    x <= rect.geometry.x + rect.geometry.w &&\n    y >= rect.geometry.y &&\n    y <= rect.geometry.y + rect.geometry.h\n};\n\nregisterShapeUtil(ShapeType.RECTANGLE, RectangleUtil);","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import { nanoid } from 'nanoid';\nimport { createNanoEvents, type Unsubscribe } from 'nanoevents';\nimport type { User } from '../model';\nimport type { PresentUser } from './PresentUser';\nimport type { PresenceEvents } from './PresenceEvents';\nimport { createDefaultAppearenceProvider } from './AppearanceProvider';\nimport type { AppearanceProvider } from './AppearanceProvider';\n\nexport interface PresenceState {\n\n  // Get users currently present to this room\n  getPresentUsers(): PresentUser[];\n\n  // Notify of a given present user's activity on the given annotations\n  notifyActivity(presenceKey: string, annotationIds: string[]): void;\n\n  // Add a listener for the given presence event\n  on<E extends keyof PresenceEvents>(event: E, callback: PresenceEvents[E]): Unsubscribe;\n\n  // Initial sync - which users are present under which keys\n  syncUsers(state: { presenceKey: string, user: User }[]): void;\n\n  // Update the selection state for the given prresent user\n  updateSelection(presenceKey: string, selection: string[] | null): void;\n\n}\n\nconst isListEqual = (listA: any[], listB: any[]) => \n  listA.every(a => listA.includes(a)) && listB.every(b => listA.includes(b));\n\n// This client's presence key\nexport const PRESENCE_KEY = nanoid();\n\nexport const createPresenceState = (\n  appearanceProvider: AppearanceProvider = createDefaultAppearenceProvider()\n): PresenceState => {\n\n  const emitter = createNanoEvents<PresenceEvents>();\n\n  const presentUsers = new Map<string, PresentUser>();\n\n  const selectionStates = new Map<string, string[]>();\n\n  const addUser = (presenceKey: string, user: User) => {\n    if (presentUsers.has(presenceKey)) {\n      console.warn('Attempt to add user that is already present', presenceKey, user);\n      return;    \n    }\n\n    const appearance = appearanceProvider.addUser(presenceKey, user);\n\n    presentUsers.set(presenceKey, { \n      ...user,\n      presenceKey,\n      appearance\n    });\n  }\n\n  const removeUser = (presenceKey: string) => {\n    const user = presentUsers.get(presenceKey);\n    if (!user) {\n      console.warn('Attempt to remove user that is not present', presenceKey);\n      return;\n    }\n\n    appearanceProvider.removeUser(user);\n\n    presentUsers.delete(presenceKey);\n  }\n\n  const syncUsers = (state: { presenceKey: string, user: User }[]) => {\n    // const keys = new Set(others.map(s => s.presenceKey));\n    const keys = new Set(state.map(s => s.presenceKey));\n\n    // These users need to be added to the presentUsers list\n    // const toAdd = others.filter(({ presenceKey }) => !presentUsers.has(presenceKey));\n    const toAdd = state.filter(({ presenceKey }) => !presentUsers.has(presenceKey));\n\n    // These users need to be dropped from the list\n    const toRemove = Array.from(presentUsers.values()).filter(presentUser =>\n      !keys.has(presentUser.presenceKey));\n\n    toAdd.forEach(({ presenceKey, user }) => addUser(presenceKey, user));\n\n    toRemove.forEach(user => {\n      const { presenceKey } = user;\n\n      // If this user has a selection, fire deselect event\n      if (selectionStates.has(presenceKey))\n        emitter.emit('selectionChange', user, null);\n\n      removeUser(presenceKey)\n    });\n\n    if (toAdd.length > 0 || toRemove.length > 0)\n      emitter.emit('presence', getPresentUsers());\n  }\n\n  const notifyActivity = (presenceKey: string, annotationIds: string[]) => {    \n    const user = presentUsers.get(presenceKey);\n    \n    if (!user) {\n      console.warn('Activity notification from user that is not present');\n      return;\n    }\n\n    const currentSelection = selectionStates.get(presenceKey);\n\n    // Was there a selection change we might have missed?\n    if (!currentSelection || !isListEqual(currentSelection, annotationIds)) {\n      selectionStates.set(presenceKey, annotationIds);\n      emitter.emit('selectionChange', user, annotationIds);\n    }\n  }\n\n  const updateSelection = (presenceKey: string, selection: string[] | null) => {\n    const from = presentUsers.get(presenceKey);\n    if (!from) {\n      console.warn('Selection change for user that is not present', presenceKey);\n      return;\n    }\n\n    if (selection)\n      selectionStates.set(presenceKey, selection);\n    else \n      selectionStates.delete(presenceKey);\n\n    emitter.emit('selectionChange', from, selection);\n  }\n\n  const getPresentUsers = () =>\n    [...Array.from(presentUsers.values())];\n    \n  const on = <E extends keyof PresenceEvents>(event: E, callback: PresenceEvents[E]) =>\n    emitter.on(event, callback);\n\n  return {\n    getPresentUsers,\n    notifyActivity,\n    on,\n    syncUsers,\n    updateSelection\n  }\n\n}","import type { PolygonGeometry, RectangleGeometry, Shape } from '@annotorious/annotorious/src/model';\nimport { ShapeType } from '@annotorious/annotorious/src/model';\nimport type { PageMetadata } from '@annotorious/formats';\nimport type { ImageAnnotation } from '@annotorious/openseadragon';\nimport type OpenSeadragon from 'openseadragon';\n\nexport interface ImageDimensions {\n\n  height: number;\n\n  width: number;\n\n}\n\nexport const getImageDimensions = (\n  viewer: OpenSeadragon.Viewer\n): Promise<ImageDimensions> => new Promise(resolve => {\n  if (viewer.world.getItemAt(0)?.source) {\n    // Image already loaded - resolve immediately\n    const { x, y } = viewer.world.getItemAt(0).source.dimensions;\n    resolve({ width: x, height: y });\n  } else {\n    // Attach onOpen handler and resolve then\n    const getDimensions = () => {\n      const { x, y } = viewer.world.getItemAt(0).source.dimensions;\n\n      viewer.removeHandler('open', getDimensions);\n\n      resolve({ width: x, height: y });\n    }\n\n    viewer.addHandler('open', getDimensions);\n  }\n});\n\nconst scaleShape = (shape: Shape, kx: number, ky: number): Shape => {\n  const { bounds } = shape.geometry;\n\n  const minX = bounds.minX * kx;\n  const minY = bounds.minY * ky;\n  const maxX = bounds.maxX * kx;\n  const maxY = bounds.maxY * ky;\n\n  if (shape.type === ShapeType.RECTANGLE) {\n    return {\n      type: ShapeType.RECTANGLE,\n      geometry: {\n        bounds: { minX, minY, maxX, maxY },\n        x: minX,\n        y: minY,\n        w: maxX - minX, \n        h: maxY - minY\n      } as RectangleGeometry\n    }\n  } else if (shape.type === ShapeType.POLYGON) {\n    return {\n      type: ShapeType.POLYGON,\n      geometry: {\n        bounds: { minX, minY, maxX, maxY },\n        points: (shape.geometry as PolygonGeometry)\n          .points.map(([x, y]) => ([x * kx, y * ky]))\n      } as PolygonGeometry\n    }\n  } else  {\n    console.error('Unsupported shape type', shape);\n    return shape;\n  }\n}\n\nexport const scaleAnnotations = (\n  a: ImageAnnotation[], \n  page: PageMetadata, \n  dim: ImageDimensions\n): ImageAnnotation[] => {\n  const pageWidth = page.width;\n  const pageHeight = page.height;\n\n  const imgWidth = dim.width;\n  const imgHeight = dim.height;\n\n  if (pageWidth && pageHeight) {\n    const kx = imgWidth / pageWidth;\n    const ky = imgHeight / pageHeight;\n\n    if (kx === 1 && ky == 1) {\n      // No need to scale\n      return a;\n    } else {\n      console.log('[TextLayerExtension] Page and image are different size - scaling annotations');\n\n      return a.map(annotation => ({\n        ...annotation,\n        target: {\n          ...annotation.target,\n          selector: scaleShape(annotation.target.selector, kx, ky)\n        }\n      }));\n    }\n  } else {\n    console.warn('[TextLayerExtension] Cannot scale annotations without page dimensions');\n    return a;\n  }\n}\n","<script type=\"ts\">\n  import type { ImageAnnotation, ImageAnnotatorState, StoreChangeEvent } from '@annotorious/openseadragon';\n  import { onMount } from 'svelte';\n  import { FillBoundsLabel, FixedPageSizeLabel, FixedScreenSizeLabel } from './Label';\n  import type { TextLayerOpts } from './Types';\n  import { getImageDimensions } from './ImageDimensions';\n    \n  /** props **/\n  export let state: ImageAnnotatorState;\n  export let viewer: OpenSeadragon.Viewer;\n  export let opts: TextLayerOpts;\n  export let visible: boolean = true;\n  export let captureEvents: boolean = false;\n\n  const { store } = state;\n\n  let transform: string;\n\n  let scale: number;\n\n  let annotations: ImageAnnotation[] = [];\n\n  let width: number;\n\n  let height: number;\n\n  const redraw = () => {\n    const viewportBounds = viewer.viewport.viewportToImageRectangle(viewer.viewport.getBounds(true));\n\n    const containerWidth = viewer.viewport.getContainerSize().x;\n    const zoom = viewer.viewport.getZoom(true);\n    scale = zoom * containerWidth / viewer.world.getContentFactor();\n\n    // @ts-ignore note: getRotation(true <- realtime value) only since OSD 4!\n    let rotation = Math.PI * viewer.viewport.getRotation(true) / 180;\n    if (rotation < 0)\n      rotation += 2 * Math.PI;\n    \n    if (rotation > 2 * Math.PI)\n      rotation -= 2 * Math.PI;\n\n    const dx = - viewportBounds.x * scale;\n    const dy = - viewportBounds.y * scale;\n\n    let offsetX: number, offsetY: number;\n\n    if (rotation > 0 && rotation <= Math.PI / 2) {\n      offsetX = viewportBounds.height * scale;\n      offsetY = 0;\n    } else if (rotation > Math.PI / 2 && rotation <= Math.PI) {\n      offsetX = viewportBounds.width * scale;\n      offsetY = viewportBounds.height * scale;\n    } else if (rotation > Math.PI && rotation <= Math.PI * 1.5) {\n      offsetX = 0;\n      offsetY = viewportBounds.width * scale;\n    } else {\n      offsetX = 0;\n      offsetY = 0;\n    }\n\n    const tx = Math.round(100 * (offsetX + dx * Math.cos(rotation) - dy * Math.sin(rotation))) / 100;\n    const ty = Math.round(100 * (offsetY + dx * Math.sin(rotation) + dy * Math.cos(rotation))) / 100;\n    \n    transform = `translate(${tx}px, ${ty}px) rotate(${rotation}rad) scale(${scale})`;\n  }\n\n  onMount(() => {\n    getImageDimensions(viewer).then(dimensions => {\n      width = dimensions.width;\n      height = dimensions.height;\n    });\n\n    viewer.addHandler('update-viewport', redraw);\n\n    const onStoreChange = ((event: StoreChangeEvent<ImageAnnotation>) => {\n      annotations = event.state;\n      redraw();\n    });\n\n    store.observe(onStoreChange);\n\n    const onCopy = (evt: ClipboardEvent) => {\n      const unformatted = document.getSelection().toString();\n\n      // @ts-ignore\n      const clipboardData = evt.clipboardData || window.clipboardData;  \n      clipboardData.setData('text/plain', unformatted);\n      clipboardData.setData('text/html', unformatted);\n\n      evt.preventDefault();\n    }\n\n    document.addEventListener('copy', onCopy);\n\n    return () => {\n      viewer.removeHandler('update-viewport', redraw);\n\n      store.unobserve(onStoreChange);\n\n      document.removeEventListener('copy', onCopy);\n    }\n  });\n</script>\n\n{#if visible}\n  <div \n    style={`transform:${transform}; width: ${width}px; height: ${height}px`}\n    class=\"a9s-annotationlayer a9s-osd-textlayer\"\n    class:fixed-screen-size={opts.mode === 'fixedScreenSize' || (!opts.mode)}\n    class:fixed-page-size={opts.mode === 'fixedPageSize'}\n    class:fill-bounds={opts.mode === 'fillBounds'}\n    class:bottomleft={opts.position !== 'topleft'}\n    class:topleft={opts.position === 'topleft'}\n    class:pointer-events={captureEvents}>\n    {#if opts.mode === 'fixedScreenSize' || (!opts.mode)}\n      {#each annotations as annotation}\n        <FixedScreenSizeLabel \n          annotation={annotation} \n          opts={opts} \n          imageSize={[width, height]}\n          scale={scale} />\n      {/each}\n    {:else if opts.mode === 'fixedPageSize'}\n      {#each annotations as annotation}\n        <FixedPageSizeLabel \n          annotation={annotation} \n          opts={opts} />\n      {/each}\n    {:else if opts.mode === 'fillBounds'}\n      {#each annotations as annotation}\n        <FillBoundsLabel \n          annotation={annotation} \n          opts={opts} />\n      {/each}\n    {/if}\n  </div>\n{/if}","import type { \n  ImageAnnotation, \n  ImageAnnotatorState, \n  OpenSeadragonAnnotator\n} from '@annotorious/openseadragon';\nimport { parseALTO } from '@annotorious/formats';\nimport type { OCRFormat, TextLayerOpts } from './Types';\nimport OpenSeadragonTextLayer from './TextLayer.svelte';\nimport { getImageDimensions, scaleAnnotations } from './ImageDimensions';\n\nimport './textLayerExtension.css';\n\nexport const mountExtension = (\n  anno: OpenSeadragonAnnotator<ImageAnnotation>, \n  opts: TextLayerOpts\n) => {\n  const { viewer, state } = anno;\n\n  let _visible = opts.initialVisibility === undefined ? true : opts.initialVisibility;\n\n  let _locked = false;\n\n  const textLayer = new OpenSeadragonTextLayer({\n    target: viewer.element.querySelector('.openseadragon-canvas'),\n    props: { state: state as ImageAnnotatorState, viewer, opts, visible: _visible }\n  });\n\n  const isVisible = () => _visible;\n\n  const isLocked = () => _locked;\n\n  const loadOCR = (url: string, format: OCRFormat = 'ALTO') => fetch(url)\n    .then(res => res.text())\n    .then(xml => {\n      const { annotations, metadata } = parseALTO(xml);\n\n      getImageDimensions(viewer).then(dimensions => {\n        const scaled = scaleAnnotations(annotations, metadata, dimensions);\n        anno.setAnnotations(scaled);\n      });\n    });\n\n  const setLocked = (locked: boolean) => {\n    _locked = locked;\n    viewer.setMouseNavEnabled(!locked);\n    textLayer.$$set({ captureEvents: locked });\n  }\n\n  const setVisible = (visible: boolean) => {\n    _visible = visible;\n    textLayer.$$set({ visible });\n  }\n\n  const unmount = () => textLayer.$destroy();\n\n  return {\n    isLocked,\n    isVisible,\n    loadOCR,\n    setLocked,\n    setVisible,\n    unmount\n  }\n\n}"],"names":["transcriptionLabel","annotation","_a","b","g","t","w","e","I","n","o","r","i","s","a","u","p","F","L","D","l","c","noop","run","fn","blank_object","run_all","fns","is_function","thing","safe_not_equal","is_empty","obj","append","target","node","insert","anchor","detach","destroy_each","iterations","detaching","element","name","text","data","empty","attr","attribute","value","children","set_data","toggle_class","toggle","current_component","set_current_component","component","get_current_component","onMount","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","update_scheduled","schedule_update","flush","add_render_callback","seen_callbacks","flushidx","saved_component","update","callback","$$","dirty","flush_render_callbacks","filtered","targets","outroing","outros","group_outros","check_outros","transition_in","block","local","transition_out","create_component","mount_component","customElement","fragment","after_update","new_on_destroy","destroy_component","make_dirty","init","options","instance","create_fragment","not_equal","props","append_styles","parent_component","ready","ret","rest","nodes","SvelteComponent","type","callbacks","index","$$props","ctx","div","span","t0","t0_value","ref","opts","$$value","$$invalidate","left","top","width","height","scaleX","scaleY","div_style_value","getStyle","size","offsetX","offsetY","cx","h","cy","scale","imageSize","x","y","bottom","ShapeType","registerShapeUtil","util","PolygonUtil","polygon","points","area","j","inside","xi","yi","xj","yj","RectangleUtil","rect","id","byte","getImageDimensions","viewer","resolve","getDimensions","scaleShape","shape","kx","ky","bounds","minX","minY","maxX","maxY","scaleAnnotations","page","dim","pageWidth","pageHeight","imgWidth","imgHeight","each_blocks","fixedscreensizelabel_changes","create_if_block","state","visible","captureEvents","store","transform","annotations","redraw","viewportBounds","containerWidth","zoom","rotation","dx","dy","tx","ty","dimensions","onStoreChange","event","onCopy","evt","unformatted","clipboardData","mountExtension","anno","_visible","_locked","textLayer","OpenSeadragonTextLayer","url","format","res","xml","metadata","parseALTO","scaled","locked"],"mappings":"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","x_google_ignoreList":[2,10]}