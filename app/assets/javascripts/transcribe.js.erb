//Voice to text functionality

//set variables and initial recognition behavior
var recognizing = false;
var ignore_onend;
//this finds the correct button on the page
var button;
//this finds the correct information span on the page
var voiceSpan;

if (window.hasOwnProperty('webkitSpeechRecognition')){
  var recognition = new webkitSpeechRecognition();
  recognition.continuous = true;
  recognition.interimResults = true;

  recognition.onstart = function(){
    recognizing = true;
    button.src = "<%= asset_path('mic-on-icon.png')%>";
    voiceSpan.text("Listening");
  };

  //change image when stop
  recognition.onend = function(){
    recognizing = false;
    if (ignore_onend){
      return;
    }
    button.src = "<%= asset_path('mic-icon.png') %>";
    voiceSpan.text("Click microphone for dictation");
  };

  recognition.onerror = function(e){
    recognizing = false;
    ignore_onend = true;
    recognition.stop();
    button.src = "<%= asset_path('mic-error-icon.png') %>";
    voiceSpan.text("Recording Error");
    voiceSpan.addClass('voice-error');
  };
}

//toggle speech to text on and off
function startButton(e){
  e.preventDefault();
  if (recognizing) {
    recognition.stop();
    return;
  }
  ignore_onend = null;
  startDictation(e.target);
}

//use to actually get the dictation
function startDictation(target){
  recognition.lang = window.lang;
  recognizing = true;
  button = target;
  var form = $(button.form);
  voiceSpan = form.find('.voice-info');
  if (voiceSpan.hasClass('voice-error')){
    voiceSpan.removeClass('voice-error');
  }

  recognition.start();
  recognition.onresult = function(e){
    var transcript = ''
    if(typeof myCodeMirror !== 'undefined' && form.find('.CodeMirror').length > 0) {
      transcript = myCodeMirror.getValue();
    } else if(form.find('textarea').length > 0) {
      transcript = form.find('textarea').val();
    }

    for (var i = e.resultIndex; i < e.results.length; ++i){
      if (e.results[i].isFinal){
        transcript += e.results[i][0].transcript;
      }
    }
    
    if(typeof myCodeMirror !== 'undefined' && form.find('.CodeMirror').length > 0) {
      myCodeMirror.setValue(transcript);
    } else if(form.find('textarea').length > 0) {
      form.find('textarea').val(transcript)
    }
  };
}

//Check for unsaved notes before save
function unsavedNotes(e){
  var notes = $('textarea#note_body');
  var msg = "You have unsaved notes. Please save or discard notes before saving transcription."
  checkForUnsaved(notes, msg, e, true);
}

//check for unsaved transcriptions before changing page
function unsavedTranscription(e){
  var msg = "You have unsaved changes. Please save or discard your work before going to the next page.";
  var inputs = $('textarea').add($('.field-input'));
  checkForUnsaved(inputs, msg, e, false);
}

//actual function to check for unsaved changes
function checkForUnsaved(inputs, msg, e, ignoreCodeMirror){
  inputs.each(function(){
    if (this.type == 'select-one' || this.type == 'select-multiple'){
      if(!(this.options[this.selectedIndex].defaultSelected) && (this.value != this.options[0].value)){
        e.preventDefault();
        alert(msg);
        return false;
      }
    }
    else {
      if (this.value != this.defaultValue){
        e.preventDefault();
        alert(msg);
        return false;
      };
    };
  });

  // the advanced editor is a contentEditable div, not an input, so we need to use the CodeMirror API
  if (typeof myCodeMirror !== 'undefined' && !ignoreCodeMirror) {
    // the advanced editor is in use
    var autolinkedSourceTextField = document.querySelector('input[name="autolinked_source_text"]');
    if (!myCodeMirror.isClean() || autolinkedSourceTextField) {
        e.preventDefault();
        alert(msg);
        return false;      
    };
  };
}

//Check for unsaved changes if user tries to navigate to project page
window.addEventListener('DOMContentLoaded', function() {
  var breadcrumbs = document.querySelector('ul.breadcrumbs');
  if (breadcrumbs) {
    breadcrumbs.addEventListener('click', function(e) {
        unsavedTranscription(e)
    });
  }
});

//Check for unsaved changes if user tries to navigate to other tabs
window.addEventListener('DOMContentLoaded', function() {
  var tabs = document.querySelector('div.tabs');
  if (tabs) {
    tabs.addEventListener('click', function(e) {
        unsavedTranscription(e)
    });
  }
});
